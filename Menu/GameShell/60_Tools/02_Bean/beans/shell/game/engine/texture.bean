
class game+, texture {

    private import
        rt::c,
        lib::sdl2,
        lib::sdl2_image;

    struct texture {
        obj void;
        format uint32;
        width int;
        height int;
        auto_destroy bool;
    }

    func constructor() {
        memset(this, 0, sizeof(texture));
        this.auto_destroy = true;
    }

    func destructor() {
        this->destroy();
    }

    func destroy() {
        if this.auto_destroy {
            if this.obj ~= null;
                SDL_DestroyTexture(this.obj);
        }
        this.obj = null;
        this.width = 0;
        this.height = 0;
    }

    func init(texture void, auto_destroy bool = true) bool {
        this->destroy();
        if texture == null {
            return false;
        }
        if SDL_QueryTexture(texture, &this.format, null, &this.width, &this.height);
            return false;
        this.obj = texture;
        this.auto_destroy = auto_destroy;
        return true;
    }

    func load_file(render void, filename. char) bool {
        this->destroy();
        if (this.obj = IMG_LoadTexture(render, filename)) == null {
            printf("IMG_LoadTexture: %s\n", SDL_GetError());
            return false;
        }
        if SDL_QueryTexture(this.obj, &this.format, null, &this.width, &this.height) {
            this->destroy();
            return false;
        }
        this.auto_destroy = true;
        return true;
    }

    func load_file_with_colorkey(render void, filename. char, r uint8, g uint8, b uint8) bool {
        var surface. SDL_Surface = IMG_Load(filename);
        if surface == null {
            printf("IMG_Load: %s\n", SDL_GetError());
            return false;
        }
        if SDL_SetColorKey(surface, SDL_RLEACCEL, SDL_MapRGB(surface.format, r, g, b)) {
            SDL_FreeSurface(surface);
            return false;
        }
        var texture void = SDL_CreateTextureFromSurface(render, surface);
        SDL_FreeSurface(surface);
        if texture == null;
            return false;
        return this->init(texture);
    }

    func clone_tex(render void, x int, y int, width int, height int, blend_mode SDL_BlendMode = SDL_BLENDMODE_NONE) void {
        if this.obj == null;
            return null;
        if (func = SDL_CreateTexture(render, this.format, SDL_TEXTUREACCESS_TARGET, width, height)) == null;
            return;
        SDL_SetRenderTarget(render, func);
        SDL_SetTextureBlendMode(func, blend_mode);
        SDL_RenderCopy(render, this.obj,
            &global::make_rect(x, y, width, height),
            &global::make_rect(0, 0, width, height));
        SDL_SetRenderTarget(render, null);
    }

    //

    inline draw(render void, x int, y int) {
        SDL_RenderCopy(render, this.obj, null,
            &this->make_rect(x, y));
    }

    inline draw2(render void, x int, y int, width int, height int) {
        SDL_RenderCopy(render, this.obj,
            &global::make_rect(0, 0, width, height),
            &global::make_rect(x, y, width, height));
    }

    inline draw3(render void, x int, y int, width int, height int) {
        SDL_RenderCopy(render, this.obj, &this->make_rect(0, 0),
            &global::make_rect(x, y, width, height));
    }

    //

    inline make_rect(x int, y int) SDL_Rect {
        func.x = x,
        func.y = y,
        func.w = this.width,
        func.h = this.height;
    }

    //

    inline get_texture() void {
        return this.obj;
    }

    inline get_width() int {
        return this.width;
    }

    inline get_height() int {
        return this.height;
    }

    inline get_blend_mode() SDL_BlendMode {
        if SDL_GetTextureBlendMode(this.obj, &func);
            func = SDL_BLENDMODE_INVALID;
    }

    inline set_blend_mode(mode SDL_BlendMode) int {
        return SDL_SetTextureBlendMode(this.obj, mode);
    }

    inline get_alpha_mod() uint8 {
        if SDL_GetTextureAlphaMod(this.obj, &func);
            func = 0;
    }

    inline set_alpha_mod(alpha uint8) int {
        return SDL_SetTextureAlphaMod(this.obj, alpha);
    }

}
