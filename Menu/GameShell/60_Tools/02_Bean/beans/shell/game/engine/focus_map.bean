
class game+, focus_map {

    private import rt::c, lib::sdl2;

    private alias vector = std::vector;

    struct map {
        control. control;
        up. control;
        down. control;
        left. control;
        right. control;
    }

    struct focus_map {
        map vector<map>;
    }

    func constructor() {
        constructor(this);
    }

    func destructor() {
        destructor(this);
    }

    func register(control. control, up. control, down. control, left. control, right. control) {
        var map. map = this.map->new();
        map.control = control;
        map.up = up;
        map.down = down;
        map.left = left;
        map.right = right;
    }

    func get(control. control, scancode SDL_Scancode) .control {
        var count size_t = this.map->count();
        while count {
            var map. map = this.map->at(--count);
            if map.control == control {
                if scancode == CPI_SCANCODE_UP {
                    return map.up;
                elseif scancode == CPI_SCANCODE_DOWN;
                    return map.down;
                elseif scancode == CPI_SCANCODE_LEFT;
                    return map.left;
                elseif scancode == CPI_SCANCODE_RIGHT;
                    return map.right;
                else
                    return null;
                }
            }
        }
        return null;
    }

}
