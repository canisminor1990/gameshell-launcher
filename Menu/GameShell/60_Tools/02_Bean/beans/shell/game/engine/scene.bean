
class game+, scene+ {

    private import rt::c;

    private alias vector = std::vector;

    struct scene {
        struct callback {
            update void;
            draw void;
            wake void;
            destructor void;
        }
        parent. window;
        name. char;
        controls vector<void>;
        focus_control. control;
        popup. control;
        closing_popup. control;
        pending_popup. control;
    }

    func constructor() {
        memset(this, 0, sizeof(scene));
        constructor(this);
    }

    func destructor() {
        if this.popup ~= null;
            free_control(this.popup);
        if this.closing_popup ~= null;
            free_control(this.closing_popup);
        if this.pending_popup ~= null;
            free_control(this.pending_popup);
        forvar count size_t = this.controls->count(); count;;
            free_control(.this.controls->at(--count));
        destructor(this);
    }

    //

    inline set_window(wnd. window) {
        this.parent = wnd;
    }

    inline get_window() .window {
        return this.parent;
    }

    inline set_name(name. char) {
        this.name = name;
    }

    inline get_name() .char {
        return this.name;
    }

    //

    inline quit() bool {
        return this.parent->pop_scene() ~= null;
    }

    // control

    func new_control<T>(x int, y int, width int = 0, height int = 0, standalone bool = false) .T {
        func = malloc_t<T>();
        #if objectid(T).func.update;
            func.super.callback.update = T::update*;
        #endif
        #if objectid(T).func.draw;
            func.super.callback.draw = T::draw*;
        #endif
        #if objectid(T).func.wake;
            func.super.callback.wake = T::wake*;
        #endif
        #if objectid(T).func.destructor;
            func.super.callback.destructor = T::destructor*;
        #endif
        func->set_parent(this);
        func->set_pos(x, y);
        func->set_size(width, height);
        #if objectid(T).func.init;
            if !func->init(this.parent->get_render()) {
                printf("Failed to load \"%s\" control.\n", objectid(T).name);
                exit(1);
            }
        #endif
        if !standalone;
            this.controls->push_back(func);
    }

    inline create_control<T>(x int, y int, width int = 0, height int = 0) .T {
        return this->new_control<T>(x, y, width, height, true);
    }

    static func free_control(control. control) {
        if control.callback.destructor ~= null {
            proto fn(this void);
            fn[control.callback.destructor](control);
        }
        free(control);
    }

    // focus

    func set_focus(control. control) {
        var prev. control = this.focus_control;
        if prev ~= null;
            prev.focus = false;
        this.focus_control = control, control.focus = true;
    }

    inline get_focus() .control {
        return this.focus_control;
    }

    // popup

    func close_popup() {
        if this.popup ~= null {
            this.closing_popup = this.popup;
            this.popup = null;
            // xxx
            if this.callback.wake ~= null {
                proto fn(this void);
                fn[this.callback.wake](this);
            }
        }
    }

    func set_popup(control. control) {
        if this.popup == null and this.closing_popup == null {
            this.popup = control;
        else
            if this.pending_popup ~= null;
                free_control(this.pending_popup);
            this.pending_popup = control;
        }
    }

    func has_popup() bool {
        if  this.popup ~= null or
            this.closing_popup ~= null or
            this.pending_popup ~= null {
            return true;
        }
        return false;
    }

    //

    func update(render void) {
        proto fn(this void, render void);
        if this.closing_popup ~= null;
            free_control(this.closing_popup), this.closing_popup = null;
        if this.pending_popup ~= null {
            if this.popup ~= null;
                free_control(this.popup);
            this.popup = this.pending_popup;
            this.pending_popup = null;
        }
        // xxx
        if this.popup == null {
            forvar count size_t = this.controls->count(); count; {
                var control. control = .this.controls->at(--count);
                if control.callback.update ~= null;
                    fn[control.callback.update](control, render);
            }
        else
            var popup. control = this.popup;
            if popup.callback.update ~= null;
                fn[popup.callback.update](popup, render);
        }
    }

    func draw(render void) {
        proto fn(this void, render void);
        forvar count size_t = this.controls->count(); count; {
            var control. control = .this.controls->at(--count);
            if control.callback.draw ~= null;
                fn[control.callback.draw](control, render);
        }
        if this.popup ~= null {
            var popup. control = this.popup;
            if popup.callback.draw ~= null;
                fn[popup.callback.draw](popup, render);
        }
    }

    func wake() {
        proto fn(this void);
        forvar count size_t = this.controls->count(); count; {
            var control. control = .this.controls->at(--count);
            if control.callback.wake ~= null;
                fn[control.callback.wake](control);
        }
        if this.popup ~= null {
            var popup. control = this.popup;
            if popup.callback.wake ~= null;
                fn[popup.callback.wake](popup);
        }
    }

}
