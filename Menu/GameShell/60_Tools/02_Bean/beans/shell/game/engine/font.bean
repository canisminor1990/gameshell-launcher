
class game+, font {

    private import rt::c, lib::sdl2_ttf;

    struct font {
        obj void;
        tex texture;
    }

    func constructor() {
        this.obj = null;
        constructor(this);
    }

    func destructor() {
        this->close();
        destructor(this);
    }

    func open(font_name. char, size int) bool {
        this->close();
        if (this.obj = TTF_OpenFont(font_name, size)) == null {
            printf("TTF_OpenFont: %s\n", font_name);
            return false;
        }
        return true;
    }

    func close() {
        this.tex->destroy();
        if this.obj ~= null;
            TTF_CloseFont(this.obj), this.obj = null;
    }

    // xxx
    inline get_width() int {
        return this.tex->get_width();
    }

    inline get_height() int {
        return TTF_FontHeight(this.obj);
    }

    inline get_line_skip() int {
        return TTF_FontLineSkip(this.obj);
    }

    inline get_size(text. char, width. int, height. int) bool {
        return TTF_SizeUTF8(this.obj, text, width, height) == 0;
    }

    func create_tex(render void, text. char, color uint32) void {
        var surface void = TTF_RenderUTF8_Solid(this.obj, text, color);
        if surface == null;
            return null;
        func = SDL_CreateTextureFromSurface(render, surface);
        SDL_FreeSurface(surface);
    }

    // fixme
    func create_outlined_tex(render void, text. char, text_color uint32, outline_color uint32, outline_size int) void {
        TTF_SetFontOutline(this.obj, outline_size);
        var outline_texture. SDL_Surface = TTF_RenderUTF8_Solid(this.obj, text, outline_color);
        TTF_SetFontOutline(this.obj, 0);
        if outline_texture == null;
            return null;
        var text_texture. SDL_Surface = TTF_RenderUTF8_Solid(this.obj, text, text_color);
        if text_texture == null {
            SDL_FreeSurface(outline_texture);
            return null;
        }
        SDL_SetSurfaceBlendMode(outline_texture, SDL_BLENDMODE_BLEND);
        var rect SDL_Rect;
        rect.x = outline_size;
        rect.y = outline_size;
        rect.w = text_texture.w;
        rect.h = text_texture.h;
        SDL_BlitSurface(text_texture, null, outline_texture, &rect);
        func = SDL_CreateTextureFromSurface(render, outline_texture);
        SDL_FreeSurface(outline_texture);
        SDL_FreeSurface(text_texture);
    }

    inline prepare(render void, text. char, color uint32) bool {
        return this.tex->init(this->create_tex(render, text, color));
    }

    inline draw(render void, x int, y int) {
        this.tex->draw(render, x, y);
    }

    inline draw2(render void, x int, y int, text. char, color uint32) {
        if this->prepare(render, text, color);
            this->draw(render, x, y);
    }

}
