
/*
    set_callback(on_select void, on_close void, arg void)
    add_menu(render void, id int, title. char)
*/

class game+, control+, popup_menu {

    inherit game::control = super;

    private import rt::c, lib::sdl2;

    private alias
        string = std::string,
        vector = std::vector;

    class menu {
        struct menu {
            white_title texture;
            black_title texture;
            id int;
        }
        func constructor() {
            constructor(this);
            this.id = -1;
        }
        func destructor() {
            destructor(this);
        }
    }

    struct popup_menu {
        menus vector<menu>;
        input_delay repeat;
        input_lock norepeat;
        on_select void;
        on_close void;
        arg void;
        cursor int;
    }

    func constructor() {
        memset(this, 0, sizeof(popup_menu));
        constructor(this);
    }

    func destructor() {
        destructor(this);
    }

    define {
        MENU_GAP = 12;
        MENU_HEIGHT = 25;
    }

    func init(render void) bool {
        this.input_delay->init(300, -10, 20);
        return true;
    }

    /*
        on_select = lambda(id int, arg void) [

        ];
        on_close = lambda(arg void) [

        ];
    */
    inline set_callback(on_select void, on_close void, arg void) {
        this.on_select = on_select;
        this.on_close = on_close;
        this.arg = arg;
    }

    func add_menu(render void, id int, title. char) {
        var menu. menu = this.menus->new();
        menu.white_title->init(
            global::uni_font->create_tex(render, title, 0xffffffff));
        menu.black_title->init(
            global::uni_font->create_tex(render, title, 0xff000000));
        menu.id = id;
        var width int = menu.black_title->get_width() + (MENU_GAP * 2);
        if this->get_width() < width;
            this->set_width(width);
        this->set_height(this.menus->count() * MENU_HEIGHT + 2);
    }

    func update(render void) {
        var state. uint8 = SDL_GetKeyboardState(null);
        if state[CPI_SCANCODE_UP] {
            if this.input_delay->do() {
                if this.cursor;
                    this.cursor--;
                this.input_delay->undo();
            }
        elseif state[CPI_SCANCODE_DOWN];
            if this.input_delay->do() {
                if this.cursor < this.menus->count() - 1;
                    this.cursor++;
                this.input_delay->undo();
            }
        else
            this.input_delay->reset();
        }
        if  state[CPI_SCANCODE_A] or
            state[CPI_SCANCODE_B] or
            state[CPI_SCANCODE_MENU] {
            if this.input_lock->do() {
                if state[CPI_SCANCODE_B] {
                    proto fn(id int, arg void);
                    fn[this.on_select](this.menus->at(this.cursor).id, this.arg);
                }
                {
                    proto fn(arg void);
                    fn[this.on_close](this.arg);
                }
            }
        else
            this.input_lock->set(false);
        }
    }
    
    func draw(render void) {
        var rect SDL_Rect = this->get_rect();
        SDL_SetRenderDrawColor(render, 0xff, 0xff, 0xff, 0xff);
        SDL_RenderFillRect(render, &rect);
        SDL_SetRenderDrawColor(render, 0xcd, 0xcd, 0xcd, 0xff);
        SDL_RenderDrawRect(render, &rect);
        rect.x += 1;
        rect.y += 1;
        rect.w -= 2;
        rect.h -= 2;
        forvar index size_t = 0, count size_t = this.menus->count(); index < count; index++ {
            var menu. menu = this.menus->at(index);
            if this.cursor == index {
                var sub_rect SDL_Rect;
                sub_rect.x = rect.x;
                sub_rect.y = rect.y;
                sub_rect.w = rect.w;
                sub_rect.h = MENU_HEIGHT;
                SDL_SetRenderDrawColor(render, 0x00, 0xa2, 0xe8, 0xff);
                SDL_RenderFillRect(render, &sub_rect);
                menu.white_title->draw(render, rect.x + MENU_GAP,
                    rect.y + (MENU_HEIGHT - menu.white_title->get_height()) / 2);
            else
                menu.black_title->draw(render, rect.x + MENU_GAP,
                    rect.y + (MENU_HEIGHT - menu.black_title->get_height()) / 2);
            }
            rect.y += MENU_HEIGHT;
        }
    }

    func wake() {
        this.input_delay->reset(false);
        this.input_lock->set(true);
    }

}
