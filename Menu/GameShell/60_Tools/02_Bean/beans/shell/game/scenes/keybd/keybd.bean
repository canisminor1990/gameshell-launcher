
/*
    set_callback(on_done void, on_close void, arg void)
    set_fadeout(fadeout. fadeio)
    set_title(render void, title. char)
    set_text(render void, text. char)
    get_text() .char
    close()
*/

class game+, scene+, keybd {

    inherit game::scene = super;

    private import rt::c, std::utf8, lib::sdl2;

    private alias string = std::string;

    private define {
        BUTTON_COL = 11;
        BUTTON_ROW = 4;
        BUTTON_COUNT = BUTTON_COL * BUTTON_ROW;
        BUTTON_WIDTH = 25;
        BUTTON_HEIGHT = 23;
        BUTTON_GAP = 3;
    }

    private var layout(3, BUTTON_COUNT) char = {

        // 0
        '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-',
        'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '_',
        'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ':', '\'',
        'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '/', '=',

        // 1
        '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+',
        'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '\\',
        'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ';', '"',
        'Z', 'X', 'C', 'V', 'B', 'N', 'M', '<', '>', '?', '|',

        // 2
        '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-',
        '~', '`', '!', '@', '#', '$', '%', '^', '&', '*', '_',
        '(', ')', '[', ']', '{', '}', ':', ';', '\'', '"', '\\',
        ',', '.', '/', '=', '<', '>', '?', '|', '+', '\0', '\0'

    };

    private define {
        SHIFT = -1;
        BACKSPACE = -2;
        SPACE = -3;
        TAB = -4;
        RETURN = -5;
    }

    struct keybd {
        struct tex {
            title texture;
            text texture;
        }
        fadeio fadeio;
        fadeout. fadeio;
        caret_timer delay;
        cursor_delay repeat;
        remove_delay repeat;
        input_lock norepeat;
        buf string;
        on_done void;
        on_close void;
        arg void;
        mode int;
        lock bool;
        prev_mode int;
        prev_lock bool;
        cursor int;
        prev_cursor int;
        start_x int;
        caret_pos int;
        caret_x int;
        draw_caret bool;
        enable_return bool;
        enable_shift bool;
    }

    func constructor() {
        memset(this, 0, sizeof(keybd));
        constructor(this);
    }
    
    func destructor() {
        destructor(this);
    }

    module singleton {

        var initd bool = false;

        var ascii(128) texture;
        var shift texture;
        var shift_white texture;
        var backspace texture;
        var space texture;
        var tab texture;
        var ret texture;

    }

    func init(render void) bool {
        if !singleton::initd {
            var str(2) char = 0;
            forvar c int = 1; c < 128; c++ {
                str[0] = c;
                singleton::ascii[c]->init(
                    global::uni_font->create_tex(render, &str, 0xff000000));
            }
            singleton::shift->init(
                global::uni_font->create_tex(render, "Shift", 0xff000000));
            singleton::shift_white->init(
                global::uni_font->create_tex(render, "Shift", 0xffffffff));
            singleton::backspace->init(
                global::uni_font->create_tex(render, "Back", 0xff000000));
            singleton::space->init(
                global::uni_font->create_tex(render, "Space", 0xff000000));
            singleton::tab->init(
                global::uni_font->create_tex(render, "Tab", 0xff000000));
            singleton::ret->init(
                global::uni_font->create_tex(render, "Return", 0xff000000));
            singleton::initd = true;
        }
        var wnd. window = this->get_window();
        this.fadeio->init(wnd, 300);
        this.fadeio->set_texture(wnd->screen_capture2());
        this.caret_timer->init(450);
        this.cursor_delay->init(300, -65, 4);
        this.remove_delay->init(300, -42, 7);
        this.prev_cursor = -1;
        this.draw_caret = true;
        this.enable_shift = true;
        return true;
    }

    /*
        on_done = lambda(text. char, arg void) [
            
        ];
        on_close = lambda(arg void) [
            
        ];
    */
    inline set_callback(on_done void, on_close void, arg void) {
        this.on_done = on_done;
        this.on_close = on_close;
        this.arg = arg;
    }

    inline set_fadeout(fadeout. fadeio) {
        this.fadeout = fadeout;
    }

    func set_title(render void, title. char) {
        this.tex.title->init(
            global::uni_font->create_tex(render, title, 0xff000000));
    }

    private inline update_text(render void) {
        this.tex.text->init(
            global::uni_font->create_tex(render, this.buf->ptr(), 0xff000000));
    }

    private define {
        TEXT_GAP = 10;
    }

    private func set_caret(pos int) {
        this.caret_timer->reset();
        this.caret_pos = pos;
        var nul. char = this.buf->ptr(this.caret_pos);
        var tmp char = .nul;
        .nul = 0;
        var caret_x int;
        if global::uni_font->get_size(this.buf->ptr(), &caret_x, null) {
            if this.caret_x = caret_x {
                this.caret_x++;
            else
                this.caret_x--;
            }
            var rect SDL_Rect = 0;
            this->get_window()->get_size(&rect.w, &rect.h);
            if this.tex.text->get_width() > (rect.w -= TEXT_GAP) {
                if this.caret_x < this.start_x {
                    this.start_x = this.caret_x;
                else
                    if (this.caret_x - this.start_x) > rect.w;
                        this.start_x = this.caret_x - rect.w;
                }
            else
                this.start_x = 0;
            }
        else
            this.start_x = 0;
            this.caret_x = 0;
        }
        .nul = tmp;
        this.draw_caret = true;
    }

    func set_text(render void, text. char) {
        this.buf->set(text);
        this->update_text(render);
        this.start_x = 0;
        this->set_caret(this.buf->len());
    }

    inline get_text() .char {
        return this.buf->ptr();
    }

    private func insert_char(render void, c char) {
        var buf(2) char;
        buf[0] = c;
        buf[1] = 0;
        this.buf->insert(this.caret_pos, &buf);
        this->update_text(render);
        this->set_caret(this.caret_pos + 1);
    }

    private func insert(render void, str. char) {
        this.buf->insert(this.caret_pos, str);
        this->update_text(render);
        this->set_caret(this.caret_pos + strlen(str));
    }

    private func remove(render void) bool {
        var tail int;
        var len int = utf8len_s(this.buf->ptr(), this.caret_pos, &tail);
        if len == -1;
            return false;
        if tail {
            if this.buf->remove(this.caret_pos - tail, tail) {
                this->update_text(render);
                this->set_caret(this.caret_pos - tail);
            }
        }
        return true;
    }

    private func toggle_shift() {
        if this.mode == 0 {
            this.mode = 1;
        elseif this.mode == 1;
            if this.lock {
                this.mode = 0;
                this.lock = false;
            else
                this.lock = true;
            }
        }
    }

    private func move_caret(left_right bool) bool {
        if left_right {
            var tail int;
            var len int = utf8len_s(this.buf->ptr(), this.caret_pos, &tail);
            if len == -1;
                return false;
            if tail {
                this->set_caret(this.caret_pos - tail);
            }
        else
            if this.caret_pos >= this.buf->len();
                return false;
            var size int = utf8table[uchar(.this.buf->ptr(this.caret_pos))];
            if (this.caret_pos + size) > this.buf->len();
                return false;
            this->set_caret(this.caret_pos + size);
        }
        return true;
    }

    func close() {
        if this.on_close ~= null {
            proto fn(arg void);
            fn[this.on_close](this.arg);
        }
        if this.fadeout ~= null {
            this.fadeout->set_texture(this->get_window()->screen_capture2());
            this.fadeout->reset();
        }
        this->quit();
    }

    private func done() {
        if this.on_done ~= null {
            proto fn(text. char, arg void);
            fn[this.on_done](this.buf->ptr(), this.arg);
        }
        this->close();
    }

    func update(render void) {
        if this.caret_timer->do() {
            this.draw_caret = !this.draw_caret;
            this.caret_timer->undo();
        }
        var state. uint8 = SDL_GetKeyboardState(null);
        if state[CPI_SCANCODE_LEFT] {
            if this.cursor_delay->do() {
                if this.cursor < 0 {
                    this.prev_cursor = -1;
                    if this.cursor == SHIFT {
                        this.cursor = TAB;
                    elseif this.cursor == SPACE;
                        this.cursor = SHIFT;
                    elseif this.cursor == RETURN;
                        this.cursor = SPACE;
                    elseif this.cursor == BACKSPACE;
                        if this.enable_return {
                            this.cursor = RETURN;
                        else
                            this.cursor = SPACE;
                        }
                    else
                        this.cursor = BACKSPACE;
                    }
                else
                    if this.cursor % BUTTON_COL {
                        this.cursor--;
                    else
                        this.cursor = (this.cursor / BUTTON_COL + 1) * BUTTON_COL - 1;
                    }
                }
                this.cursor_delay->undo();
            }
        elseif state[CPI_SCANCODE_RIGHT];
            if this.cursor_delay->do() {
                if this.cursor < 0 {
                    this.prev_cursor = -1;
                    if this.cursor == TAB {
                        this.cursor = SHIFT;
                    elseif this.cursor == SHIFT;
                        this.cursor = SPACE;
                    elseif this.cursor == SPACE;
                        if this.enable_return {
                            this.cursor = RETURN;
                        else
                            this.cursor = BACKSPACE;
                        }
                    elseif this.cursor == RETURN;
                        this.cursor = BACKSPACE;
                    else
                        this.cursor = TAB;
                    }
                else
                    if this.cursor % BUTTON_COL == BUTTON_COL - 1 {
                        this.cursor = (this.cursor / BUTTON_COL) * BUTTON_COL;
                    else
                        this.cursor++;
                    }
                }
                this.cursor_delay->undo();
            }
        elseif state[CPI_SCANCODE_UP];
            if this.cursor_delay->do() {
                if this.cursor < 0 {
                    if this.prev_cursor < 0 {
                        if this.cursor == TAB {
                            this.cursor = BUTTON_COUNT - BUTTON_COL;
                        elseif this.cursor == SHIFT;
                            this.cursor = BUTTON_COUNT - (BUTTON_COL - 2);
                        elseif this.cursor == SPACE;
                            this.cursor = BUTTON_COUNT - (BUTTON_COL - 4);
                        elseif this.cursor == RETURN;
                            this.cursor = BUTTON_COUNT - (BUTTON_COL - 7);
                        else
                            this.cursor = BUTTON_COUNT - (BUTTON_COL - 9);
                        }
                    else
                        this.cursor = this.prev_cursor;
                    }
                else
                    if this.cursor - BUTTON_COL > -1;
                        this.cursor -= BUTTON_COL;
                }
                this.cursor_delay->undo();
            }
        elseif state[CPI_SCANCODE_DOWN];
            if this.cursor_delay->do() {
                if this.cursor > -1 {
                    if this.cursor + BUTTON_COL < BUTTON_COUNT {
                        this.cursor += BUTTON_COL;
                    else
                        this.prev_cursor = this.cursor;
                        var col int = this.cursor % BUTTON_COL;
                        if col >= 0 and col <= 1 {
                            this.cursor = TAB;
                        elseif col >= 2 and col <= 3;
                            this.cursor = SHIFT;
                        elseif col >= 4 and col <= 8;
                            this.cursor = SPACE;
                            if this.enable_return {
                                if col >= 7 and col <= 8;
                                    this.cursor = RETURN;
                            }
                        else
                            this.cursor = BACKSPACE;
                        }
                    }
                }
                this.cursor_delay->undo();
            }
        elseif state[CPI_SCANCODE_A];
            if this.remove_delay->do() {
                this->remove(render);
                this.remove_delay->undo();
            }
        elseif state[CPI_SCANCODE_LK1];
            if this.cursor_delay->do() {
                this->move_caret(true);
                this.cursor_delay->undo();
            }
        elseif state[CPI_SCANCODE_LK5];
            if this.cursor_delay->do() {
                this->move_caret(false);
                this.cursor_delay->undo();
            }
        // CPI_SCANCODE_LK2
        // CPI_SCANCODE_LK4
        else
            this.cursor_delay->reset();
            this.remove_delay->reset();
        }
        if state[CPI_SCANCODE_MENU] {
            if this.input_lock->do() {
                this->close();
            }
        elseif state[CPI_SCANCODE_SELECT];
            if this.input_lock->do() {
                if this.mode == 2 {
                    this.mode = this.prev_mode;
                    this.lock = this.prev_lock;
                    this.enable_shift = true;
                else
                    this.prev_mode = this.mode;
                    this.prev_lock = this.lock;
                    this.mode = 2;
                    this.lock = false;
                    this.enable_shift = false;
                }
            }
        elseif state[CPI_SCANCODE_START];
            if this.input_lock->do() {
                this->done();
            }
        elseif state[CPI_SCANCODE_B];
            if this.input_lock->do() {
                if this.cursor < 0 {
                    if this.cursor == SHIFT {
                        this->toggle_shift();
                    elseif this.cursor == BACKSPACE;
                        this->remove(render);
                    elseif this.cursor == SPACE;
                        this->insert_char(render, ' ');
                    elseif this.cursor == TAB;
                        this->insert_char(render, '\t');
                    elseif this.cursor == RETURN;
                        this->insert_char(render, '\n');
                    }
                else
                    var pressed char = layout[this.mode, this.cursor];
                    if pressed {
                        if this.mode == 1 {
                            if !this.lock;
                                this.mode = 0;
                        }
                        this->insert_char(render, pressed);
                    }
                }
            }
        elseif state[CPI_SCANCODE_X];
            if this.input_lock->do() {
                this->toggle_shift();
            }
        elseif state[CPI_SCANCODE_Y];
            if this.input_lock->do() {
                this->insert_char(render, ' ');
            }
        elseif state[CPI_SCANCODE_SHIFT_SELECT];
            if this.input_lock->do() {
                var wnd. window = this->get_window();
                var browser. scene::file_browser = wnd->new_scene<scene::file_browser>();
                browser->set_callback(
                    lambda(filename. char, this.keybd) [
                        this->insert(this->get_window()->get_render(), filename);
                    ], null, this
                );
                browser->set_fadeout(&this.fadeio);
                if browser->set_dir(wnd->get_render(), "/home/cpi") or
                    browser->set_dir(wnd->get_render(), "/") {
                    browser->set_mode(
                        scene::file_browser::mode.select);
                    wnd->push_scene(this);
                    wnd->set_scene(browser);
                else
                    wnd->free_scene(browser);
                }
            }
        else
            this.input_lock->set(false);
        }
    }

    private func draw_button(render void, index int, rect. SDL_Rect, tex. texture, custom_color bool = false) {
        var focus bool = index == this.cursor;
        if !custom_color {
            if focus {
                SDL_SetRenderDrawColor(render, 0xff, 0xff, 0xff, 0xff);
            else
                SDL_SetRenderDrawColor(render, 235, 235, 235, 0xff);
            }
        }
        SDL_RenderFillRect(render, rect);
        if focus {
            SDL_SetRenderDrawColor(render, 0, 162, 232, 0xff);
            SDL_RenderDrawRect(render, rect);
        else
            SDL_SetRenderDrawColor(render, 127, 127, 127, 0xff);
            SDL_RenderDrawRect(render, rect);
        }
        tex->draw(render,
            rect.x + (rect.w - tex->get_width()) / 2,
            rect.y + (rect.h - tex->get_height()) / 2);
    }

    func draw(render void) {
        define {
            TITLE_X = 10;
            TITLE_Y = 10;
            TEXT_Y = 45;
            KEYBD_Y = 85;
        }
        SDL_SetRenderDrawColor(render, 245, 245, 245, 0xff);
        SDL_RenderClear(render);
        var rect SDL_Rect = 0;
        this->get_window()->get_size(&rect.w, &rect.h);
        // title
        this.tex.title->draw(render, TITLE_X, TITLE_Y);
        using caret_x int {
            // text
            if this.tex.text->get_texture() == null {
                caret_x = rect.w / 2;
            else
                var width int = this.tex.text->get_width();
                if width > (rect.w - TEXT_GAP) {
                    var x int = (TEXT_GAP / 2);
                    caret_x = x + (this.caret_x - this.start_x);
                    this.tex.text->draw(render, x + -this.start_x, TEXT_Y);
                else
                    var x int = (rect.w - width) / 2;
                    caret_x = x + this.caret_x;
                    this.tex.text->draw(render, x, TEXT_Y);
                }
            }
            // caret
            if this.draw_caret {
                SDL_SetRenderDrawColor(render, 125, 125, 125, 0xff);
                SDL_RenderDrawLine(render, caret_x, TEXT_Y, caret_x,
                    TEXT_Y + global::uni_font->get_height());
            }
        }
        // keybd
        var sub_rect SDL_Rect;
        var x int = (rect.w - ((BUTTON_COL * (BUTTON_WIDTH + BUTTON_GAP)) - BUTTON_GAP)) / 2;
        var y int = KEYBD_Y;
        forvar index int = 0; index < BUTTON_COUNT; index++ {
            sub_rect.x = x + ((index % BUTTON_COL) * (BUTTON_WIDTH + BUTTON_GAP));
            sub_rect.y = y + ((index / BUTTON_COL) * (BUTTON_HEIGHT + BUTTON_GAP));
            sub_rect.w = BUTTON_WIDTH;
            sub_rect.h = BUTTON_HEIGHT;
            this->draw_button(render, index, &sub_rect,
                &singleton::ascii[layout[this.mode, index]]);
        }
        sub_rect.x = x;
        sub_rect.y += BUTTON_WIDTH + BUTTON_GAP;
        sub_rect.w = ((BUTTON_WIDTH + BUTTON_GAP) * 2) - BUTTON_GAP;
        sub_rect.h = BUTTON_HEIGHT;
        this->draw_button(render, TAB, &sub_rect,
            &singleton::tab);
        sub_rect.x += sub_rect.w + BUTTON_GAP;
        sub_rect.w = ((BUTTON_WIDTH + BUTTON_GAP) * 2) - BUTTON_GAP;
        sub_rect.h = BUTTON_HEIGHT;
        {
            var custom_color bool = false;
            var tex. texture = &singleton::shift;
            if this.enable_shift {
                if this.mode == 1 {
                    if this.lock {
                        tex = &singleton::shift_white;
                        SDL_SetRenderDrawColor(render, 130, 130, 130, 0xff);
                    else
                        SDL_SetRenderDrawColor(render, 205, 205, 205, 0xff);
                    }
                    custom_color = true;
                }
            else
                SDL_SetRenderDrawColor(render, 165, 165, 165, 0xff);
                custom_color = true;
            }
            this->draw_button(render, SHIFT, &sub_rect, tex, custom_color);
        }
        SDL_SetRenderDrawColor(render, 205, 205, 205, 0xff);
        if this.enable_return {
            sub_rect.x += sub_rect.w + BUTTON_GAP;
            sub_rect.w = ((BUTTON_WIDTH + BUTTON_GAP) * 3) - BUTTON_GAP;
            sub_rect.h = BUTTON_HEIGHT;
            this->draw_button(render, SPACE, &sub_rect,
                &singleton::space, true);
            sub_rect.x += sub_rect.w + BUTTON_GAP;
            sub_rect.w = ((BUTTON_WIDTH + BUTTON_GAP) * 2) - BUTTON_GAP;
            sub_rect.h = BUTTON_HEIGHT;
            this->draw_button(render, RETURN, &sub_rect,
                &singleton::ret);
        else
            sub_rect.x += sub_rect.w + BUTTON_GAP;
            sub_rect.w = ((BUTTON_WIDTH + BUTTON_GAP) * 5) - BUTTON_GAP;
            sub_rect.h = BUTTON_HEIGHT;
            this->draw_button(render, SPACE, &sub_rect,
                &singleton::space, true);
        }
        sub_rect.x += sub_rect.w + BUTTON_GAP;
        sub_rect.w = ((BUTTON_WIDTH + BUTTON_GAP) * 2) - BUTTON_GAP;
        sub_rect.h = BUTTON_HEIGHT;
        this->draw_button(render, BACKSPACE, &sub_rect,
            &singleton::backspace);
        this.fadeio->do();
    }

    func wake() {
        this.caret_timer->done();
        this.cursor_delay->reset(false);
        this.remove_delay->reset(false);
        this.input_lock->set(true);
    }

}
