
class game+, scene+, main+ {

    inherit game::scene = super;

    private import rt::c, lib::sdl2;

    private alias vector = std::vector;

    struct main {
        struct tex {
            background texture;
        }
        fadeio fadeio;
        input_lock norepeat;
        status_bar. status_bar;
        tile_menu. tile_menu;
        sub_menu. sub_menu;
    }

    func constructor() {
        constructor(this);
    }

    func destructor() {
        destructor(this);
    }

    private func standby() bool {
        var level byte = global::get_backlight_level();
        if level == -1;
            return false;
        if !global::set_backlight_level(0);
            return false;
        lambda signal(pids. vector<int>, sig int) [
            var count size_t = pids->count();
            while count {
                var pid int = .pids->at(--count);
                if pid ~= -1;
                    kill(pid, sig);
            }
        ];
        var pids vector<int>;
        pids->push_back(find_pid_by_cmdline("/home/cpi/launcher/sys.py/gsnotify/gsnotify-arm"));
        signal(&pids, SIGTSTP);
        for ;; {
            var event SDL_Event;
            while SDL_PollEvent(&event) {
                if event.type == SDL_KEYDOWN {
                    break 2;
                elseif event.type == SDL_QUIT;
                    this->get_window()->quit();
                    break 2;
                }
            }
            sleep(3);
        }
        signal(&pids, SIGCONT);
        forvar attempt int = 0; attempt < 3; attempt++ {
            if global::set_backlight_level(level);
                break;
            sleep(1);
        }
        return true;
    }

    func init(render void) bool {
        var wnd. window = this->get_window();
        var rect SDL_Rect = 0;
        wnd->get_size(&rect.w, &rect.h);
        this.tex.background->load_file(render,
            global::make_path("main/background.png"));
        this.fadeio->init(wnd, 300);
        this.fadeio->set_texture(wnd->screen_capture2());
        // 1st
        this.tile_menu = this->new_control<tile_menu>(0, 36, rect.w, 114);
        define {
            MENU_NONE = 1;
            MENU_BROWSER = 2;
            MENU_STANDBY = 3;
            MENU_QUIT = 4;
        }
        // 2nd
        this.sub_menu = this->new_control<sub_menu>(0, 176, rect.w, 40);
        this.sub_menu->set_callback(
            lambda(id int, this.main) [
                if id == MENU_BROWSER {
                    var wnd. window = this->get_window();
                    var browser. scene::file_browser = wnd->new_scene<scene::file_browser>();
                    browser->set_fadeout(&this.fadeio);
                    browser->set_mode(
                        scene::file_browser::mode.browse);
                    var cwd(0x800) char;
                    if getcwd(&cwd, sizeof(cwd)) ~= null and browser->set_dir(wnd->get_render(), &cwd) {
                        wnd->push_scene(this);
                        wnd->set_scene(browser);
                    else
                        wnd->free_scene(browser);
                    }
                elseif id == MENU_STANDBY;
                    this->standby();
                elseif id == MENU_QUIT;
                    this->get_window()->quit();
                }
            ], this
        );
        this.sub_menu->add_menu(render, MENU_BROWSER, "File Browser",
            global::make_path("main/browser.png"));
        this.sub_menu->add_menu(render, MENU_STANDBY, "Standby",
            global::make_path("main/standby.png"));
        this.sub_menu->add_menu(render, MENU_QUIT, "Quit",
            global::make_path("main/quit.png"));
        // 3rd
        this.status_bar = this->new_control<status_bar>(8, 4, rect.w - 16, 26);
        this->set_focus(this.tile_menu);
        return true;
    }

    func update(render void) {
        this.super->update(render);
        var state. uint8 = SDL_GetKeyboardState(null);
        if state[CPI_SCANCODE_SELECT] {
            /*
                if this.input_lock->do() {
                    var cwd(0x800) char;
                    if getcwd(&cwd, sizeof(cwd)) ~= null {
                        var filename std::string;
                        filename->format("%s/bean", &cwd);
                        execl(  filename->ptr(),
                                filename->ptr(), null);
                    }
                }
            */
        else
            this.input_lock->set(false);
        }
    }

    func draw(render void) {
        if this.tex.background->get_texture() == null {
            SDL_SetRenderDrawColor(render, 0xff, 0xff, 0xff, 0xff);
            SDL_RenderClear(render);
        else
            this.tex.background->draw(render, 0, 0);
        }
        var rect SDL_Rect = 0;
        this->get_window()->get_size(&rect.w, &rect.h);
        // ...
        global::small_font->draw_page(render, 8, rect.h - 18,
            this.tile_menu->get_page(), tile_menu::MAX_PAGE);
        this.super->draw(render);
        this.fadeio->do();
    }

    func wake() {
        this.input_lock->set(true);
        this.super->wake();
    }

}
