
/*
    set_callback(on_select void, on_close void, arg void)
    set_fadeout(fadeout. fadeio)
    set_ext(ext. char)
    set_dir(render void, dir_name. char) bool
    refresh(render void) bool
    set_mode(mode mode)
    set_exec_format(format. char)
    hidden_files(visible bool)
    cursor_to(name. char) bool
    goto_parent_dir(render void) bool
    get_dir_count() size_t
    get_file_count() size_t
    get_all_count() size_t
    get_path() .char
    close()
*/

class game+, scene+, file_browser {

    inherit game::scene = super;

    private import rt::c, lib::sdl2;

    private alias
        string = std::string,
        strings = std::strings,
        vector = std::vector;

    private alias popup_menu = control::popup_menu;

    enum mode {
        browse,
        select,
        select_file,
        select_dir,
        select_image,
        exec
    }

    struct file {
        icon texture;
        black_font texture;
        white_font texture;
        link bool;
        type uchar;
        str(NAME_MAX) char;
    }

    struct file_browser {
        struct tex {
            dir texture;
            reg texture;
            lnk texture;
            name texture;
            image texture;
            empty texture;
        }
        fadeio fadeio;
        fadeout. fadeio;
        image_timer delay;
        input_delay repeat;
        input_lock norepeat;
        root string;
        path string;
        ext strings;
        dirs vector<file>;
        files vector<file>;
        on_select void;
        on_close void;
        arg void;
        cursor int;
        start_index int;
        exec_format string;
        mode mode;
        hidden_files bool;
    }

    func constructor() {
        memset(this, 0, sizeof(file_browser));
        constructor(this);
    }

    func destructor() {
        destructor(this);
    }

    define {
        TOP_HEIGHT = 23;
        ITEM_HEIGHT = 25;
        SCROLL_WIDTH = 8;
        SCROLL_HEIGHT = 80;
    }

    func init(render void) bool {
        this.tex.dir->load_file(render,
            global::make_path("file_browser/dir.png"));
        this.tex.reg->load_file(render,
            global::make_path("file_browser/reg.png"));
        this.tex.lnk->load_file(render,
            global::make_path("file_browser/lnk.png"));
        this.tex.empty->init(
            global::uni_font->create_tex(render, "Empty", 0xff000000));
        var wnd. window = this->get_window();
        this.fadeio->init(wnd, 300);
        this.fadeio->set_texture(wnd->screen_capture2());
        this.image_timer->init(300);
        this.input_delay->init(300, -48, 6);
        this.exec_format->set("%s");
        return true;
    }

    /*
        on_select = lambda(filename. char, arg void) [
            
        ];
        on_close = lambda(arg void) [
            
        ];
    */
    inline set_callback(on_select void, on_close void, arg void) {
        this.on_select = on_select;
        this.on_close = on_close;
        this.arg = arg;
    }

    inline set_fadeout(fadeout. fadeio) {
        this.fadeout = fadeout;
    }

    private inline reload_image() {
        this.tex.image->destroy();
        this.image_timer->reset();
    }

    /*
        slow
    */
    private static func sort(items. vector<file>) {
        forvar i int = 0, c int = items->count() - 1; i < c; i++ {
            forvar j int = 0; j < c - i; j++ {
                var x. file = items->at(j);
                var y. file = items->at(j + 1);
                if strcmp(&x.str, &y.str) > 0 {
                    var tmp $file = .x;
                    .x = .y;
                    .y = tmp;
                }
            }
        }
    }

    func set_ext(ext. char) {
        this.ext->clear();
        this.ext->split(ext, ",");
    }

    private func is_allow_ext(filename. char) bool {
        if this.ext->empty();
            return true;
        var extension. char = strrchr(filename, '.');
        if extension == null {
            extension = "?";
        else
            extension++;
        }
        var count size_t = this.ext->count();
        while count {
            if !strcasecmp(this.ext->item(--count), extension);
                return true;
        }
        return false;
    }

    func set_dir(render void, dir_name. char, root bool = false) bool {
        var dir void = opendir(dir_name);
        if dir == null;
            return false;
        this.tex.name->init(
            global::uni_font->create_tex(render, dir_name, 0xffffffff));
        this.path->set(dir_name);
        while this.path->len() > 1 and
            this.path->ends_with('/');
            this.path->remove_back();
        if root;
            this.root->set(this.path->ptr());
        this.dirs->clear();
        this.files->clear();
        this.cursor = 0;
        this.start_index = 0;
        using ent. struct_dirent {
            while (ent = readdir(dir)) ~= null {
                var file. file;
                var link bool = false;
                if ent.d_type == DT_LNK {
                    var str string;
                    var path. char = realpath(str->format("%s/%s", this.path->ptr(), &ent.d_name), null);
                    if path == null;
                        continue;
                    defer free(path);
                    var st struct_stat;
                    if stat(path, &st);
                        continue;
                    if S_ISDIR(st.st_mode) {
                        ent.d_type = DT_DIR;
                    elseif S_ISREG(st.st_mode);
                        ent.d_type = DT_REG;
                    else
                        ent.d_type = DT_UNKNOWN;
                    }
                    link = true;
                }
                if this.hidden_files and ent.d_name[0] == '.' {
                    continue;
                }
                if ent.d_type == DT_DIR {
                    if  ent.d_name[0] == '.' and !ent.d_name[1] or
                        ent.d_name[1] == '.' and !ent.d_name[2] {
                        file = null;
                    else
                        file = this.dirs->new();
                        file.icon->init(this.tex.dir->get_texture(), false);
                    }
                elseif ent.d_type == DT_REG;
                    if this->is_allow_ext(&ent.d_name) {
                        file = this.files->new();
                        file.icon->init(this.tex.reg->get_texture(), false);
                    else
                        file = null;
                    }
                else
                    file = null;
                }
                if file ~= null {
                    file.link = link;
                    file.type = ent.d_type;
                    strcpy(&file.str, &ent.d_name);
                }
            }
        }
        closedir(dir);
        this->sort(&this.dirs);
        this->sort(&this.files);
        this->reload_image();
        return true;
    }

    inline refresh(render void) bool {
        return this->set_dir(render, this.path->ptr());
    }

    inline set_mode(mode mode) {
        this.mode = mode;
    }

    inline set_exec_format(format. char) {
        this.exec_format->set(format);
    }

    inline hidden_files(visible bool) {
        this.hidden_files = visible;
    }

    func cursor_to(name. char) bool {
        forvar index size_t = 0, count size_t = this.dirs->count(); index < count; index++ {
            if !strcmp(&this.dirs->at(index).str, name) {
                this.cursor = index;
                this->update_scroll();
                this->reload_image();
                return true;
            }
        }
        forvar index size_t = 0, count size_t = this.files->count(); index < count; index++ {
            if !strcmp(&this.files->at(index).str, name) {
                this.cursor = this.dirs->count() + index;
                this->update_scroll();
                this->reload_image();
                return true;
            }
        }
        return false;
    }

    func goto_parent_dir(render void) bool {
        if this.path->empty();
            return false;
        var path string;
        path->set(this.path->ptr());
        while path->ends_with('/');
            path->remove_back();
        if path->empty();
            return true;
        /*
            fixme
        */
        if !strcmp(path->ptr(), this.root->ptr()) {
            this->close();
            return true;
        }
        var slash. char = strrchr(path->ptr(), '/');
        if slash == null;
            return false;
        var cur_dir string;
        cur_dir->set(slash + 1);
        if slash == path->ptr() {
            path->set("/");
        else
            path->set(path->ptr(), slash - path->ptr());
        }
        if func = this->set_dir(render, path->ptr()) {
            if !cur_dir->empty() {
                this->cursor_to(cur_dir->ptr());
            }
        }
    }

    inline get_dir_count() size_t {
        return this.dirs->count();
    }

    inline get_file_count() size_t {
        return this.files->count();
    }

    inline get_all_count() size_t {
        return this.dirs->count() + this.files->count();
    }

    inline get_path() .char {
        return this.path->ptr();
    }

    private func get_selected_file() .file {
        var cursor int = this.cursor;
        var dir_count size_t = this.dirs->count();
        if dir_count and cursor < dir_count {
            return this.dirs->at(cursor);
        else
            if (cursor -= dir_count) < this.files->count();
                return this.files->at(cursor);
            return null;
        }
    }

    func close() {
        if this.on_close ~= null {
            proto fn(arg void);
            fn[this.on_close](this.arg);
        }
        if this.fadeout ~= null {
            this.fadeout->set_texture(this->get_window()->screen_capture2());
            this.fadeout->reset();
        }
        this->quit();
    }

    private func select(filename. char) {
        if this.on_select ~= null {
            proto fn(filename. char, arg void);
            fn[this.on_select](filename, this.arg);
        }
        this->close();
    }

    private func exec(filename. char) {
        var str string;
        exec3(this->get_window(), "Please Wait",
            str->format(this.exec_format->ptr(), filename));
    }

    private func action(render void) {
        var file. file = this->get_selected_file();
        if file ~= null {
            if file.type == DT_DIR {
                var new_path string;
                new_path->set(this.path->ptr());
                while new_path->ends_with('/');
                    new_path->remove_back();
                this->set_dir(render,
                    new_path->appendf("/%s", &file.str));
            elseif file.type == DT_REG;
                if  this.mode == mode.select or
                    this.mode == mode.select_file or
                    this.mode == mode.select_image {
                    var filename string;
                    this->select(filename->format("%s/%s",
                        this->get_path(), &file.str));
                elseif this.mode == mode.exec;
                    var filename string;
                    this->exec(filename->format("%s/%s",
                        this->get_path(), &file.str));
                }
            }
        }
    }

    private func show_popup(render void, file. file) {
        // MENU_COPY
        // MENU_PASTE
        define {
            MENU_REFRESH = 1;
            MENU_EXECUTE = 2;
            MENU_SELECT = 3;
            MENU_LINK = 4;
            MENU_DELETE = 5;
            MENU_EXIT = 6;
        }
        this->close_popup();
        var popup. popup_menu = this->create_control<popup_menu>(0, 0);
        popup->set_callback(
            lambda(id int, this.file_browser) [
                if id == MENU_REFRESH {
                    this->refresh(this->get_window()->get_render());
                elseif id == MENU_EXECUTE;
                    var file. file = this->get_selected_file();
                    if file ~= null {
                        var filename string;
                        this->exec(filename->format("%s/%s",
                            this->get_path(), &file.str));
                    }
                elseif id == MENU_SELECT;
                    var file. file = this->get_selected_file();
                    if file ~= null {
                        var filename string;
                        this->select(filename->format("%s/%s",
                            this->get_path(), &file.str));
                    }
                elseif id == MENU_LINK;
                    var file. file = this->get_selected_file();
                    if file ~= null {
                        var parent. scene::main = this->get_window()->get_last_scene();
                        if parent ~= null {
                            if !strcmp(parent->get_name(), "main") {
                                import scene::main;
                                var tile_menu. tile_menu = parent.tile_menu;
                                tile_menu->set_mode(tile_menu::mode.link);
                                var filename string;
                                var link string;
                                link->format(this.exec_format->ptr(),
                                    filename->format("%s/%s", this->get_path(), &file.str));
                                tile_menu->set_link(link->ptr());
                                this->close();
                            }
                        }
                    }
                elseif id == MENU_DELETE;
                    var file. file = this->get_selected_file();
                    if file ~= null {
                        var filename string;
                        system(filename->format("sudo rm -rf \"%s/%s\"",
                            this->get_path(), &file.str));
                        // TODO
                    }
                elseif id == MENU_EXIT;
                    this->close();
                }
            ],
            lambda(this.file_browser) [
                this->close_popup();
            ], this);
        popup->add_menu(render, MENU_REFRESH, "Refresh");
        if file ~= null {
            if file.type == DT_REG {
                var filename string;
                var st struct_stat;
                if !stat(filename->format("%s/%s", this->get_path(), &file.str), &st) {
                    if st.st_mode & S_IXUSR {
                        popup->add_menu(render, MENU_EXECUTE, "Execute");
                    }
                }
                if  this.mode == mode.browse or
                    this.mode == mode.exec {
                    popup->add_menu(render, MENU_LINK, "Link");
                }
            elseif file.type == DT_DIR;
                if  this.mode == mode.select or
                    this.mode == mode.select_dir {
                    popup->add_menu(render, MENU_SELECT, "Select");
                }
            }
        }
        // popup->add_menu(render, MENU_DELETE, "Delete");
        popup->add_menu(render, MENU_EXIT, "Exit");
        var rect SDL_Rect = 0;
        this->get_window()->get_size(&rect.w, &rect.h);
        popup->set_pos(
            (rect.w - popup->get_width()) / 2,
            (rect.h - popup->get_height()) / 2);
        this->set_popup(popup);
    }

    private func update_scroll() {
        var rect SDL_Rect = 0;
        this->get_window()->get_size(&rect.w, &rect.h);
        if this.start_index > this.cursor {
            this.start_index = this.cursor;
        else
            var display_count int = (rect.h - TOP_HEIGHT) / ITEM_HEIGHT;
            var delta int = this.cursor - this.start_index + 1;
            if display_count < delta;
                this.start_index += delta - display_count;
        }
    }

    func update(render void) {
        if this->has_popup() {
            this.super->update(render);
        else
            if this.image_timer->do() {
                if this.mode == mode.select_image {
                    if this.tex.image->get_texture() == null {
                        var file. file = this->get_selected_file();
                        if file ~= null {
                            if file.type == DT_REG {
                                var filename string;
                                this.tex.image->load_file(render,
                                    filename->format("%s/%s", this->get_path(), &file.str));
                            }
                        }
                        this.image_timer->reset();
                    }
                }
            }
            var state. uint8 = SDL_GetKeyboardState(null);
            if state[CPI_SCANCODE_UP] {
                if this.input_delay->do() {
                    if this.cursor {
                        this.cursor--;
                        this->update_scroll();
                        this->reload_image();
                    }
                    this.input_delay->undo();
                }
            elseif state[CPI_SCANCODE_DOWN];
                if this.input_delay->do() {
                    if this.cursor < this->get_all_count() -1 {
                        this.cursor++;
                        this->update_scroll();
                        this->reload_image();
                    }
                    this.input_delay->undo();
                }
            elseif state[CPI_SCANCODE_LEFT];
                if this.input_delay->do() {
                    if this.cursor - 10 < 0 {
                        this.cursor = 0;
                    else
                        this.cursor -= 10;
                    }
                    this->update_scroll();
                    this->reload_image();
                    this.input_delay->undo();
                }
            elseif state[CPI_SCANCODE_RIGHT];
                if this.input_delay->do() {
                    if this.cursor + 10 < this->get_all_count() -1 {
                        this.cursor += 10;
                    else
                        this.cursor = this->get_all_count() -1;
                    }
                    this->update_scroll();
                    this->reload_image();
                    this.input_delay->undo();
                }
            else
                this.input_delay->reset();
            }
            if state[CPI_SCANCODE_A] {
                if this.input_lock->do();
                    this->goto_parent_dir(render);
            elseif state[CPI_SCANCODE_B];
                if this.input_lock->do();
                    this->action(render);
            elseif state[CPI_SCANCODE_MENU];
                if this.input_lock->do();
                    this->show_popup(render, this->get_selected_file());
            else
                this.input_lock->set(false);
            }
        }
    }

    private func draw_items(render void, items. vector<file>, begin size_t, cursor int, rect. SDL_Rect, x int, y& int) bool {
        forvar index size_t = begin, count size_t = items->count(); index < count; index++ {
            var item. file = items->at(index);
            var sub_rect SDL_Rect;
            sub_rect.x = 0;
            sub_rect.y = y;
            sub_rect.w = rect.w;
            sub_rect.h = ITEM_HEIGHT;
            if index + cursor == this.cursor {
                SDL_SetRenderDrawColor(render, 0x00, 0xa2, 0xe8, 0xff);
                SDL_RenderFillRect(render, &sub_rect);
                if item.white_font->get_texture() == null {
                    item.white_font->init(
                        global::uni_font->create_tex(render, &item.str, 0xffffffff));
                }
                item.white_font->draw(render, x + item.icon->get_width() + 3,
                    y + (ITEM_HEIGHT - item.white_font->get_height()) / 2);
            else
                if (y - TOP_HEIGHT) / ITEM_HEIGHT % 2 {
                    SDL_SetRenderDrawColor(render, 0xe0, 0xe0, 0xe0, 0xff);
                    SDL_RenderFillRect(render, &sub_rect);
                }
                if item.black_font->get_texture() == null {
                    item.black_font->init(
                        global::uni_font->create_tex(render, &item.str, 0xff000000));
                }
                item.black_font->draw(render, x + item.icon->get_width() + 3,
                    y + (ITEM_HEIGHT - item.black_font->get_height()) / 2);
            }
            item.icon->draw(render, x,
                y + (ITEM_HEIGHT - item.icon->get_height()) / 2);
            if item.link {
                this.tex.lnk->draw(render, x,
                    y + (ITEM_HEIGHT - this.tex.lnk->get_height()) / 2);
            }
            if (y += ITEM_HEIGHT) > rect.h;
                return false;
        }
        return true;
    }

    func draw(render void) {
        SDL_SetRenderDrawColor(render, 0xff, 0xff, 0xff, 0xff);
        SDL_RenderClear(render);
        var rect SDL_Rect = 0;
        this->get_window()->get_size(&rect.w, &rect.h);
        var sub_rect SDL_Rect;
        sub_rect.x = 0;
        sub_rect.y = 0;
        sub_rect.w = rect.w;
        sub_rect.h = TOP_HEIGHT;
        SDL_SetRenderDrawColor(render, 0x35, 0x35, 0x35, 0xff);
        SDL_RenderFillRect(render, &sub_rect);
        if this.tex.name->get_width() > rect.w {
            this.tex.name->draw(render,
                -(this.tex.name->get_width() - rect.w) - 4,
                (TOP_HEIGHT - this.tex.name->get_height()) / 2);
        else
            this.tex.name->draw(render,
                (rect.w - this.tex.name->get_width()) / 2,
                (TOP_HEIGHT - this.tex.name->get_height()) / 2);
        }
        var file_count int = this->get_all_count();
        if file_count {
            var x int = 4;
            var y int = TOP_HEIGHT;
            var dir_count size_t = this.dirs->count();
            if dir_count and this.start_index < dir_count {
                if this->draw_items(render, &this.dirs, this.start_index, 0, &rect, x, y);
                    this->draw_items(render, &this.files, 0, dir_count, &rect, x, y);
            else
                this->draw_items(render, &this.files, this.start_index - dir_count, dir_count, &rect, x, y);
            }
            var display_count int = (rect.h - TOP_HEIGHT) / ITEM_HEIGHT;
            if display_count < file_count {
                sub_rect.x = rect.w - SCROLL_WIDTH;
                sub_rect.y = TOP_HEIGHT +
                    int((float(this.start_index) / (file_count - display_count)) *
                        (rect.h - (TOP_HEIGHT + SCROLL_HEIGHT)));
                sub_rect.w = SCROLL_WIDTH;
                sub_rect.h = SCROLL_HEIGHT;
                SDL_SetRenderDrawColor(render, 0x80, 0x80, 0x80, 0xff);
                SDL_RenderFillRect(render, &sub_rect);
            }
        else
            this.tex.empty->draw(render,
                (rect.w - this.tex.empty->get_width()) / 2,
                (rect.h - this.tex.empty->get_height()) / 2);
        }
        define {
            IMAGE_MAX_WIDTH = 80;
            IMAGE_MAX_HEIGHT = 80;
            IMAGE_GAP = 15;
        }
        if this.tex.image->get_texture() ~= null {
            var width int = this.tex.image->get_width();
            var height int = this.tex.image->get_height();
            if width > IMAGE_MAX_WIDTH;
                width = IMAGE_MAX_WIDTH;
            if height > IMAGE_MAX_HEIGHT;
                height = IMAGE_MAX_HEIGHT;
            this.tex.image->draw3(render,
                rect.w - (width + IMAGE_GAP),
                rect.h - (height + IMAGE_GAP), width, height);
        }
        this.super->draw(render);
        this.fadeio->do();
    }

    func wake() {
        this.input_delay->reset(false);
        this.input_lock->set(true);
        this.super->wake();
    }

}
