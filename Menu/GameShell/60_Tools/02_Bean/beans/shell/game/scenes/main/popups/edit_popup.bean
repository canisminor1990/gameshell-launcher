
/*
    fill_in(render void, app. tile_app)
*/

class game+, scene+, main+, edit_popup {

    inherit game::control = super;

    private import rt::c, lib::sdl2;

    private alias string = std::string;

    private alias
        button = control::button,
        edit = control::edit,
        image_button = control::image_button,
        label = control::label;

    private alias tile_app = tile_menu::tile_app;

    struct edit_popup {
        input_delay repeat;
        input_lock norepeat;
        new_icon string;
        focus_map focus_map;
        app. tile_app;
        label_title. label;
        label_cmd. label;
        label_icon. label;
        edit_title. edit;
        edit_cmd. edit;
        button_icon. image_button;
        button_cancel. button;
        button_save. button;
    }

    func constructor() {
        constructor(this);
    }

    func destructor() {
        destructor(this);
    }

    func init(render void) bool {
        this.input_delay->init(300, -10, 20);
        var rect SDL_Rect = this->get_rect();
        var y int = 10;
        this.label_title = this->new_control<label>(10, y);
        this.label_title->set_text(render, "Title");
        this.edit_title = this->new_control<edit>(
            10, y += (this.label_title->get_height() + 3), rect.w - 20, 25);
        this.label_cmd = this->new_control<label>(
            10, y += (this.edit_title->get_height() + 3));
        this.label_cmd->set_text(render, "CommandLine");
        this.edit_cmd = this->new_control<edit>(
            10, y += (this.label_cmd->get_height() + 3), rect.w - 20, 25);
        this.label_icon = this->new_control<label>(
            10, y += (this.edit_cmd->get_height() + 3));
        this.label_icon->set_text(render, "Icon");
        this.button_icon = this->new_control<image_button>(
            10, y += (this.label_icon->get_height() + 3));
        this.button_icon->set_normal_image(render,
            global::make_path("main/tile_52x52.png"));
        this.button_icon->set_hover_image(render,
            global::make_path("main/tile_hover_52x52.png"));
        this.button_icon->set_outline_size(1);
        define {
            BUTTON_WIDTH = 70;
            BUTTON_HEIGHT = 30;
        }
        this.button_cancel = this->new_control<button>(
            rect.w - ((BUTTON_WIDTH * 2) + 16),
            rect.h - (BUTTON_HEIGHT + 10), BUTTON_WIDTH, BUTTON_HEIGHT);
        this.button_cancel->set_text(render, "Cancel");
        this.button_save = this->new_control<button>(
            rect.w - (BUTTON_WIDTH + 10),
            rect.h - (BUTTON_HEIGHT + 10), BUTTON_WIDTH, BUTTON_HEIGHT);
        this.button_save->set_text(render, "Save");
        this.focus_map->register(this.edit_title, null, this.edit_cmd, null, null);
        this.focus_map->register(this.edit_cmd, this.edit_title, this.button_icon, null, null);
        this.focus_map->register(this.button_icon, this.edit_cmd, null, null, this.button_cancel);
        this.focus_map->register(this.button_cancel, this.edit_cmd, null, this.button_icon, this.button_save);
        this.focus_map->register(this.button_save, this.edit_cmd, null, this.button_cancel, null);
        this->set_focus(this.edit_title);
        return true;
    }

    func fill_in(render void, app. tile_app) {
        this.app = app;
        if app.title ~= null;
            this.edit_title->set_text(render, app.title);
        if app.cmd ~= null;
            this.edit_cmd->set_text(render, app.cmd);
        if app.icon ~= null;
            this.button_icon->set_image(render, app.icon);
    }

    private func show_keybd(render void, title. char, edit. edit) {
        var wnd. window = this->get_window();
        var keybd. scene::keybd = wnd->new_scene<scene::keybd>();
        keybd->set_callback(edit->get_keybd_cb(), null, edit);
        keybd->set_fadeout(&this->get_parent_t<scene::main>().fadeio);
        keybd->set_title(render, title);
        keybd->set_text(render, edit->get_text());
        wnd->push_scene(this->get_parent());
        wnd->set_scene(keybd);
    }

    private func close() {
        var parent. tile_menu = this->get_parent_control();
        parent->clear_link();
        parent->close_popup();
    }

    func update(render void) {
        var state. uint8 = SDL_GetKeyboardState(null);
        if state[CPI_SCANCODE_UP] {
            if this.input_delay->do() {
                var focus void = this.focus_map->get(this->get_focus(), CPI_SCANCODE_UP);
                if focus ~= null;
                    this->set_focus(focus);
                this.input_delay->undo();
            }
        elseif state[CPI_SCANCODE_DOWN];
            if this.input_delay->do() {
                var focus void = this.focus_map->get(this->get_focus(), CPI_SCANCODE_DOWN);
                if focus ~= null;
                    this->set_focus(focus);
                this.input_delay->undo();
            }
        elseif state[CPI_SCANCODE_LEFT];
            if this.input_delay->do() {
                var focus void = this.focus_map->get(this->get_focus(), CPI_SCANCODE_LEFT);
                if focus ~= null;
                    this->set_focus(focus);
                this.input_delay->undo();
            }
        elseif state[CPI_SCANCODE_RIGHT];
            if this.input_delay->do() {
                var focus void = this.focus_map->get(this->get_focus(), CPI_SCANCODE_RIGHT);
                if focus ~= null;
                    this->set_focus(focus);
                this.input_delay->undo();
            }
        else
            this.input_delay->reset();
        }
        if  state[CPI_SCANCODE_A] or
            state[CPI_SCANCODE_MENU] {
            if this.input_lock->do() {
                this->close();
            }
        elseif state[CPI_SCANCODE_B];
            if this.input_lock->do() {
                var focus void = this->get_focus();
                if focus == this.edit_title {
                    this->show_keybd(render, "Title", this.edit_title);
                elseif focus == this.edit_cmd;
                    this->show_keybd(render, "CommandLine", this.edit_cmd);
                elseif focus == this.button_icon;
                    var wnd. window = this->get_window();
                    var browser. scene::file_browser = wnd->new_scene<scene::file_browser>();
                    browser->set_callback(
                        lambda(filename. char, this.edit_popup) [
                            var render void = this->get_window()->get_render();
                            if this.button_icon->set_image(render, filename) {
                                this.new_icon->set(filename);
                            else
                                var app. tile_app = this.app;
                                this.button_icon->set_image(render, app.icon);
                                this.new_icon->clear();
                            }
                        ], null, this
                    );
                    browser->set_fadeout(&this->get_parent_t<scene::main>().fadeio);
                    browser->set_mode(
                        scene::file_browser::mode.select_image);
                    var path string;
                    var cwd(0x800) char;
                    if getcwd(&cwd, sizeof(cwd)) ~= null and
                        browser->set_dir(wnd->get_render(), path->format("%s/icons", &cwd)) or
                        browser->set_dir(wnd->get_render(), &cwd) {
                        wnd->push_scene(this->get_parent());
                        wnd->set_scene(browser);
                    else
                        wnd->free_scene(browser);
                    }
                elseif focus == this.button_cancel;
                    this->close();
                elseif focus == this.button_save;
                    var tile_app. tile_app = this.app;
                    var new_icon. char;
                    if this.new_icon->empty() {
                        new_icon = tile_app.icon;
                    else
                        new_icon = this.new_icon->ptr();
                    }
                    if tile_app.type == -1 {
                        global::apps->insert(tile_app.slot, 1,
                            this.edit_title->get_text(),
                            this.edit_cmd->get_text(), new_icon);
                    else
                        global::apps->update(tile_app.slot, tile_app.type,
                            this.edit_title->get_text(),
                            this.edit_cmd->get_text(), new_icon);
                    }
                    var parent. tile_menu = this->get_parent_control();
                    parent->reload_page(render);
                    this->close();
                }
            }
        else
            this.input_lock->set(false);
        }
        this.super->update(render);
    }
    
    func draw(render void) {
        var rect SDL_Rect = this->get_rect();
        SDL_SetRenderDrawBlendMode(render, SDL_BLENDMODE_BLEND);
        SDL_SetRenderDrawColor(render, 245, 245, 245, 230);
        SDL_RenderFillRect(render, &rect);
        SDL_SetRenderDrawBlendMode(render, SDL_BLENDMODE_NONE);
        SDL_SetRenderDrawColor(render, 0xcd, 0xcd, 0xcd, 0xff);
        SDL_RenderDrawRect(render, &rect);
        this.super->draw(render);
    }

    func wake() {
        this.input_delay->reset(false);
        this.input_lock->set(true);
        this.super->wake();
    }

}
