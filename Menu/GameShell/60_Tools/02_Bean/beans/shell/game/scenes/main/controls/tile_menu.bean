
/*
    reload_page(render void)
    set_mode(mode. mode)
    get_mode() mode
    set_link(filename. char)
    clear_link()
    get_page() int
    set_page(render void, page int)
    set_cursor(cursor int)
    get_app(index int) .tile_app
    get_selected_app() .tile_app
*/

class game+, scene+, main+, tile_menu {

    inherit game::control = super;

    private import rt::c, lib::sdl2;

    private alias
        string = std::string,
        strings = std::strings;

    private alias popup_menu = control::popup_menu;

    enum mode {
        none,
        move,
        link
    }

    class image_cache {
        private import rt::c;
        private alias
            vector = std::vector,
            string = std::string;
        struct cache {
            filename string;
            tex texture;
        }
        struct image_cache {
            caches vector<cache>;
        }
        func constructor() {
            constructor(this); }
        func destructor() {
            destructor(this); }
        func find(filename. char) .cache {
            var count size_t = this.caches->count();
            while count {
                var cache. cache = this.caches->at(--count);
                if !strcmp(cache.filename->ptr(), filename) {
                    return cache;
                }
            }
            return null;
        }
        func load_file(render void, filename. char) void {
            var cache. cache = this->find(filename);
            if cache == null {
                cache = this.caches->new();
                cache.filename->set(filename);
                if !cache.tex->load_file(render, filename) {
                    this.caches->pop_back();
                    return null;
                }
            }
            return cache.tex->get_texture();
        }
    }

    /*
        fixme
    */
    class tile_app {
        struct tile_app {
            struct tex {
                icon texture;
                title texture;
            }
            icon. char;
            title. char;
            cmd. char;
            slot int;
            type int;
        }
        func constructor() {
            constructor(this); }
        func destructor() {
            destructor(this); }
    }

    struct tile_menu {
        struct tex {
            tile texture;
            tile_hover texture;
            // ...
            move_mode texture;
            link_mode texture;
        }
        input_delay repeat;
        input_lock norepeat;
        page int;
        cursor int;
        struct slide {
            delay delay;
            dir bool;
        }
        image_cache image_cache;
        apps(TILE_COUNT) tile_app;
        temp_apps(TILE_COUNT) tile_app;
        moving_icon texture;
        mode mode;
        from int;
        link string;
    }

    func constructor() {
        memset(this, 0, sizeof(tile_menu));
        constructor(this);
    }

    func destructor() {
        destructor(this);
    }

    define {
        TILE_COUNT = 10;
        TILE_HALF_COUNT = TILE_COUNT / 2;
        TILE_WIDTH = 52;
        TILE_HEIGHT = 52;
        TILE_GAP = 10;
    }

    define {
        MAX_PAGE = 10;
    }

    static func free_app(app. tile_app) {
        app.tex.icon->destroy();
        app.tex.title->destroy();
        app.icon = null;
        app.title = null;
        app.cmd = null;
        app.type = -1;
    }

    func reload_page(render void) {
        struct args {
            tile_menu. tile_menu;
            tile_apps. tile_app;
            render void;
            begin int;
        }
        var arg args;
        arg.tile_menu = this;
        arg.tile_apps = &this.apps;
        arg.render = render;
        arg.begin = (this.page - 1) * TILE_COUNT;
        forvar i int = 0; i < TILE_COUNT; i++ {
            var app. tile_app = &this.apps[i];
            this->free_app(app);
            app.slot = arg.begin + i;
        }
        global::apps->for_each(arg.begin, arg.begin + (TILE_COUNT - 1),
            lambda(app. app_list::app, arg. args) [
                var tile_menu. tile_menu = arg.tile_menu;
                var tile_app. tile_app = &arg.tile_apps[app.slot - arg.begin];
                tile_app.tex.icon->init(
                    tile_menu.image_cache->load_file(arg.render,
                        tile_app.icon = app.icon->ptr()), false);
                using title void {
                    tile_app.title = app.title->ptr();
                    // deprecated
                    if global::outlined_font {
                        title = global::uni_font->create_outlined_tex(arg.render, tile_app.title,
                            0xffffffff, 0xff000000, 1);
                    else
                        title = global::uni_font->create_tex(arg.render, tile_app.title, 0xff000000);
                    }
                    tile_app.tex.title->init(title);
                }
                tile_app.cmd = app.cmd->ptr();
                tile_app.type = app.type;
            ], &arg
        );
    }

    func init(render void) bool {
        this.tex.tile->load_file(render,
            global::make_path("main/tile_52x52.png"));
        this.tex.tile_hover->load_file(render,
            global::make_path("main/tile_hover_52x52.png"));
        // ...
        this.tex.move_mode->init(
            global::uni_font->create_tex(render, "Move Mode", 0xffffffff));
        this.tex.link_mode->init(
            global::uni_font->create_tex(render, "Link Mode", 0xffffffff));
        this.input_delay->init(300, -25, 10);
        this.slide.delay->done();
        this.page = 1;
        this->reload_page(render);
        return true;
    }

    private func exec(cmd. char) {
        if .cmd == '#' {
            var strs strings;
            strs->split(++cmd, "\t");
            /*
               #exec dir ext format
            */
            if !strcmp(strs->first_item(), "exec") {
                if strs->count() > 3 {
                    var wnd. window = this->get_window();
                    var browser. scene::file_browser = wnd->new_scene<scene::file_browser>();
                    browser->set_fadeout(&this->get_parent_t<scene::main>().fadeio);
                    browser->hidden_files(true);
                    browser->set_mode(
                        scene::file_browser::mode.exec);
                    if strlen(strs->item(2));
                        browser->set_ext(strs->item(2));
                    browser->set_exec_format(strs->item(3));
                    mkdir(strs->item(1), 0775);
                    if browser->set_dir(wnd->get_render(), strs->item(1), true) {
                        wnd->push_scene(this->get_parent());
                        wnd->set_scene(browser);
                    else
                        wnd->free_scene(browser);
                    }
                }
            }
        elseif .cmd;
            exec3(this->get_window(), "Please Wait", cmd);
        }
    }

    // popup

    private func adjust_popup_pos(popup. popup_menu) {
        var x int = this->get_x() + TILE_GAP;
        var y int = this->get_y();
        if this.cursor < TILE_HALF_COUNT {
            x += this.cursor * (TILE_WIDTH + TILE_GAP);
        else
            x += (this.cursor - TILE_HALF_COUNT) * (TILE_WIDTH + TILE_GAP);
            y += TILE_HEIGHT + TILE_GAP;
        }
        x += TILE_WIDTH;
        var rect SDL_Rect = 0;
        this->get_window()->get_size(&rect.w, &rect.h);
        var popup_width int = popup->get_width();
        var popup_height int = popup->get_height();
        if (x + popup_width) > rect.w;
            x -= popup_width + TILE_WIDTH;
        if (y + popup_height) > rect.h;
            y = rect.h - popup_height;
        popup->set_pos(x, y);
    }

    private func show_edit_popup(render void, app. tile_app) {
        define {
            POPUP_WIDTH = 280;
            POPUP_HEIGHT = 186;
        }
        var rect SDL_Rect = 0;
        this->get_window()->get_size(&rect.w, &rect.h);
        this->close_popup();
        var popup. edit_popup = this->create_control<edit_popup>(
            (rect.w - POPUP_WIDTH) / 2,
            (rect.h - POPUP_HEIGHT) / 2, POPUP_WIDTH, POPUP_HEIGHT);
        popup->fill_in(render, app);
        this->set_popup(popup);
    }

    private func show_popup(render void, app. tile_app) {
        define {
            MENU_REMOVE = -1;
            MENU_EXECUTE = 0;
            MENU_MOVE = 1;
            MENU_EDIT = 2;
        }
        this->close_popup();
        var popup. popup_menu = this->create_control<popup_menu>(0, 0);
        popup->set_callback(
            lambda(id int, this.tile_menu) [
                var app. tile_app = this->get_selected_app();
                if id == MENU_REMOVE {
                    if global::apps->remove(app.slot);
                        this->free_app(app);
                elseif id == MENU_EXECUTE;
                    if app.cmd ~= null;
                        this->exec(app.cmd);
                elseif id == MENU_MOVE;
                    var render void = this->get_window()->get_render();
                    this.from = app.slot;
                    this.moving_icon->init(
                        this.image_cache->load_file(render, app.icon), false);
                    this.mode = mode.move;
                elseif id == MENU_EDIT;
                    this->show_edit_popup(this->get_window()->get_render(), app);
                }
            ],
            lambda(this.tile_menu) [
                this->close_popup();
            ], this);
        if app.type == -1 {
            popup->add_menu(render, MENU_EDIT, "Edit");
        else
            popup->add_menu(render, MENU_EXECUTE, "Execute");
            popup->add_menu(render, MENU_MOVE, "Move");
            if app.type {
                popup->add_menu(render, MENU_EDIT, "Edit");
                popup->add_menu(render, MENU_REMOVE, "Remove");
            }
        }
        this->adjust_popup_pos(popup);
        this->set_popup(popup);
    }

    //

    private func try_slide(render void, cursor int, page int, dir bool, delay int = 300) {
        if this.slide.delay->done?() {
            this.cursor = cursor;
            this.page = page;
            this.temp_apps = this.apps;
            memset(&this.apps, 0, sizeof(tile_app, TILE_COUNT));
            this->reload_page(render);
            this.slide.dir = dir;
            this.slide.delay->init(delay);
            this->get_window()->enable_turbo(delay * 2);
        }
    }

    func update(render void) {
        if this->has_focus() {
            if this->has_popup() {
                this.super->update(render);
            else
                var state. uint8 = SDL_GetKeyboardState(null);
                if state[CPI_SCANCODE_LEFT] {
                    if this.input_delay->do() {
                        if !this.cursor {
                            if this.page > 1 {
                                this->try_slide(render, TILE_HALF_COUNT - 1, this.page - 1, false);
                            else
                                this->try_slide(render, TILE_HALF_COUNT - 1, MAX_PAGE, false);
                            }
                        elseif this.cursor == TILE_HALF_COUNT;
                            if this.page > 1 {
                                this->try_slide(render, TILE_COUNT - 1, this.page - 1, false);
                            else
                                this->try_slide(render, TILE_COUNT - 1, MAX_PAGE, false);
                            }
                        elseif this.cursor;
                            this.cursor--;
                        }
                        this.input_delay->undo();
                    }
                elseif state[CPI_SCANCODE_RIGHT];
                    if this.input_delay->do() {
                        if this.cursor == TILE_HALF_COUNT - 1 {
                            if this.page < MAX_PAGE {
                                this->try_slide(render, 0, this.page + 1, true);
                            else
                                this->try_slide(render, 0, 1, true);
                            }
                        elseif this.cursor == TILE_COUNT - 1;
                            if this.page < MAX_PAGE {
                                this->try_slide(render, TILE_HALF_COUNT, this.page + 1, true);
                            else
                                this->try_slide(render, TILE_HALF_COUNT, 1, true);
                            }
                        elseif this.cursor < TILE_COUNT - 1;
                            this.cursor++;
                        }
                        this.input_delay->undo();
                    }
                elseif state[CPI_SCANCODE_UP];
                    if this.input_delay->do() {
                        if this.cursor >= TILE_HALF_COUNT;
                            this.cursor -= TILE_HALF_COUNT;
                        this.input_delay->undo();
                    }
                elseif state[CPI_SCANCODE_DOWN];
                    if this.input_delay->do() {
                        if this.cursor < TILE_HALF_COUNT {
                            this.cursor += TILE_HALF_COUNT;
                        elseif this.mode == mode.none;
                            var parent. scene::main = this->get_parent();
                            var cursor int = this.cursor - TILE_HALF_COUNT;
                            #if TILE_HALF_COUNT > sub_menu::MENU_COUNT;
                                cursor /= (TILE_HALF_COUNT / sub_menu::MENU_COUNT);
                            #else
                                cursor += (sub_menu::MENU_COUNT - TILE_HALF_COUNT) / 2;
                            #endif
                            if cursor >= sub_menu::MENU_COUNT;
                                cursor = sub_menu::MENU_COUNT - 1;
                            var sub_menu. sub_menu = parent.sub_menu;
                            sub_menu->set_cursor(cursor);
                            sub_menu->wake();
                            parent->set_focus(sub_menu);
                        }
                        this.input_delay->undo();
                    }
                else
                    this.input_delay->reset();
                }
                if state[CPI_SCANCODE_A] {
                    if this.input_lock->do() {
                        if this.mode == mode.move {
                            this.mode = mode.none;
                            this.moving_icon->destroy();
                        elseif this.mode == mode.link;
                            this.mode = mode.none;
                            this.link->clear();
                        }
                    }
                elseif state[CPI_SCANCODE_B];
                    if this.input_lock->do() {
                        if this.mode == mode.none {
                            var app. tile_app = this->get_selected_app();
                            if app.cmd ~= null {
                                this->exec(app.cmd);
                            }
                        elseif this.mode == mode.move;
                            var app. tile_app = this->get_selected_app();
                            if app.slot == this.from {
                                this.mode = mode.none;
                                this.moving_icon->destroy();
                            else
                                if app.type {
                                    if global::apps->move(this.from, app.slot);
                                        this->reload_page(render);
                                    this.mode = mode.none;
                                    this.moving_icon->destroy();
                                else
                                    // system app
                                }
                            }
                        elseif this.mode == mode.link;
                            var app. tile_app = this->get_selected_app();
                            if app.type == -1 {
                                app.cmd = this.link->ptr();
                                this->show_edit_popup(render, app);
                                this.mode = mode.none;
                            }
                        }
                    }
                elseif state[CPI_SCANCODE_MENU];
                    if this.input_lock->do() {
                        if this.mode == mode.none;
                            this->show_popup(render, this->get_selected_app());
                    }
                elseif state[CPI_SCANCODE_LK1];
                    if this.input_lock->do() {
                        if this.page > 1 {
                            this->try_slide(render, this.cursor, this.page - 1, false);
                        else
                            this->try_slide(render, this.cursor, MAX_PAGE, false);
                        }
                    }
                elseif state[CPI_SCANCODE_LK5];
                    if this.input_lock->do() {
                        if this.page < MAX_PAGE {
                            this->try_slide(render, this.cursor, this.page + 1, true);
                        else
                            this->try_slide(render, this.cursor, 1, true);
                        }
                    }
                else
                    this.input_lock->set(false);
                }
            }
        }
    }

    private func draw_icon(render void, icon. texture, rect. SDL_Rect) {
        var width int = icon->get_width();
        var height int = icon->get_height();
        if width > rect.w;
            width = rect.w;
        if height > rect.h;
            height = rect.h;
        icon->draw3(render,
            rect.x + (rect.w - width) / 2,
            rect.y + (rect.h - height) / 2, width, height);
    }

    private func draw_tiles(render void, x int, y int, start int, end int) {
        var rect SDL_Rect;
        rect.y = y + 1;
        rect.w = TILE_WIDTH - 2;
        rect.h = TILE_HEIGHT - 2;
        forvar index int = start; index < end; index++ {
            var app. tile_app = &this.apps[index];
            rect.x = x + 1;
            if this->has_focus() and this.cursor == index {
                this.tex.tile_hover->draw(render, x, y);
                if this.moving_icon->get_texture() == null {
                    this->draw_icon(render, &app.tex.icon, &rect);
                else
                    this->draw_icon(render, &this.moving_icon, &rect);
                }
                // out of bounds
                app.tex.title->draw(render,
                    this->get_x() + (this->get_width() - app.tex.title->get_width()) / 2,
                    this->get_bottom() + 5);
            else
                this.tex.tile->draw(render, x, y);
                this->draw_icon(render,
                    &app.tex.icon, &rect);
            }
            x += (TILE_GAP + TILE_WIDTH);
        }
    }

    private func draw_temp_tiles(render void, x int, y int, start int, end int) {
        var rect SDL_Rect;
        rect.y = y + 1;
        rect.w = TILE_WIDTH - 2;
        rect.h = TILE_HEIGHT - 2;
        forvar index int = start; index < end; index++ {
            this.tex.tile->draw(render, x, y);
            rect.x = x + 1;
            this->draw_icon(render, &this.temp_apps[index].tex.icon, &rect);
            x += (TILE_GAP + TILE_WIDTH);
        }
    }

    private func slide(render void) int {
        if this.slide.delay->do() {
            forvar index int = 0; index < TILE_COUNT; index++;
                this->free_app(&this.temp_apps[index]);
            return 0;
        }
        var delta int = this.slide.delay->get_per_r<int>(this->get_width());
        if this.slide.dir {
            this->draw_temp_tiles(render,
                this->get_x() - delta + TILE_GAP,
                this->get_y(), 0, TILE_HALF_COUNT);
            this->draw_temp_tiles(render,
                this->get_x() - delta + TILE_GAP,
                this->get_y() + (TILE_GAP + TILE_HEIGHT), TILE_HALF_COUNT, TILE_COUNT);
            return this->get_width() - delta;
        else
            this->draw_temp_tiles(render,
                this->get_x() + delta + TILE_GAP,
                this->get_y(), 0, TILE_HALF_COUNT);
            this->draw_temp_tiles(render,
                this->get_x() + delta + TILE_GAP,
                this->get_y() + (TILE_GAP + TILE_HEIGHT), TILE_HALF_COUNT, TILE_COUNT);
            return -(this->get_width() - delta);
        }
    }

    func draw(render void) {
        var delta int = this->slide(render);
        this->draw_tiles(render,
            this->get_x() + TILE_GAP + delta,
            this->get_y(), 0, TILE_HALF_COUNT);
        this->draw_tiles(render,
            this->get_x() + TILE_GAP + delta,
            this->get_y() + (TILE_GAP + TILE_HEIGHT), TILE_HALF_COUNT, TILE_COUNT);
        this.super->draw(render);
        // out of bounds
        if this.mode ~= mode.none {
            define {
                PADDING = 3;
            }
            var tex. texture;
            if this.mode == mode.move {
                tex = &this.tex.move_mode;
            elseif this.mode == mode.link;
                tex = &this.tex.link_mode;
            }
            var rect SDL_Rect;
            rect.x = 0;
            rect.y = 0;
            rect.w = tex->get_width() + (PADDING * 2);
            rect.h = tex->get_height() + (PADDING * 2);
            SDL_SetRenderDrawColor(render, 52, 152, 219, 0xff);
            SDL_RenderFillRect(render, &rect);
            tex->draw(render, PADDING, PADDING);
        }
    }

    func wake() {
        this.input_delay->reset(false);
        this.input_lock->set(true);
        this.super->wake();
    }

    //

    inline set_mode(mode. mode) {
        this.mode = mode;
    }

    inline get_mode() mode {
        return this.mode;
    }

    inline set_link(filename. char) {
        this.link->set(filename);
    }

    inline clear_link() {
        this.link->clear();
    }

    inline get_page() int {
        return this.page;
    }

    inline set_page(render void, page int) {
        this.page = page;
        this->reload_page(render);
    }

    inline set_cursor(cursor int) {
        this.cursor = cursor;
    }

    inline get_app(index int) .tile_app {
        return &this.apps[index];
    }

    inline get_selected_app() .tile_app {
        return this->get_app(this.cursor);
    }

}
