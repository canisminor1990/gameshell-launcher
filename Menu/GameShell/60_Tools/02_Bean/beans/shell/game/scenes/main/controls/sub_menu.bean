
/*
    set_callback(on_press void, arg void)
    add_menu(render void, id int, title. char, icon_filename. char) bool
    set_cursor(cursor int)
    get_selected_menu() .menu
*/

class game+, scene+, main+, sub_menu {

    inherit game::control = super;

    private import rt::c, lib::sdl2;

    class menu {
        struct menu {
            icon texture;
            title texture;
            id int;
        }
        func constructor() {
            constructor(this); }
        func destructor() {
            destructor(this); }
    }

    struct sub_menu {
        struct tex {
            button texture;
            button_hover texture;
        }
        menus(MENU_COUNT) menu;
        menu_count int;
        input_delay repeat;
        input_lock norepeat;
        cursor int;
        on_press void;
        arg void;
    }

    func constructor() {
        memset(this, 0, sizeof(sub_menu));
        constructor(this);
    }

    func destructor() {
        destructor(this);
    }

    define {
        MENU_COUNT = 5;
        BUTTON_WIDTH = 40;
        BUTTON_HEIGHT = 40;
        BUTTON_GAP = 10;
    }

    func init(render void) bool {
        this.tex.button->load_file(render,
            global::make_path("main/button_40x40.png"));
        this.tex.button_hover->load_file(render,
            global::make_path("main/button_hover_40x40.png"));
        this.input_delay->init(300, -10, 20);
        return true;
    }

    inline set_callback(on_press void, arg void) {
        this.on_press = on_press;
        this.arg = arg;
    }

    func add_menu(render void, id int, title. char, icon_filename. char) bool {
        if this.menu_count >= MENU_COUNT;
            return false;
        this.menus[this.menu_count].icon->load_file(render, icon_filename);
        this.menus[this.menu_count].title->init(
            global::uni_font->create_tex(render, title, 0xff000000));
        this.menus[this.menu_count].id = id;
        this.menu_count++;
        return true;
    }

    func update(render void) {
        if this->has_focus() {
            var state. uint8 = SDL_GetKeyboardState(null);
            if state[CPI_SCANCODE_LEFT] {
                if this.input_delay->do() {
                    if this.cursor;
                        this.cursor--;
                    this.input_delay->undo();
                }
            elseif state[CPI_SCANCODE_RIGHT];
                if this.input_delay->do() {
                    if this.cursor < MENU_COUNT - 1;
                        this.cursor++;
                    this.input_delay->undo();
                }
            elseif state[CPI_SCANCODE_UP];
                var parent. scene::main = this->get_parent();
                var cursor int = this.cursor;
                #if MENU_COUNT > tile_menu::TILE_HALF_COUNT;
                    cursor /= (MENU_COUNT / tile_menu::TILE_HALF_COUNT);
                #else
                    cursor += (tile_menu::TILE_HALF_COUNT - MENU_COUNT) / 2;
                #endif
                if (cursor += tile_menu::TILE_HALF_COUNT) >= tile_menu::TILE_COUNT;
                    cursor = tile_menu::TILE_COUNT - 1;
                var tile_menu. tile_menu = parent.tile_menu;
                tile_menu->set_cursor(cursor);
                tile_menu->wake();
                parent->set_focus(tile_menu);
            else
                this.input_delay->reset();
            }
            if state[CPI_SCANCODE_B] {
                if this.input_lock->do() {
                    var menu. menu = this->get_selected_menu();
                    if menu ~= null {
                        proto fn(id int, arg void);
                        fn[this.on_press](menu.id, this.arg);
                    }
                }
            else
                this.input_lock->set(false);
            }
        }
    }

    func draw(render void) {
        var focus bool = this->has_focus();
        var rect SDL_Rect = 0;
        this->get_window()->get_size(&rect.w, &rect.h);
        var x int = this->get_x() +
            (this->get_width() - ((BUTTON_WIDTH * MENU_COUNT) + (BUTTON_GAP * (MENU_COUNT - 1)))) / 2;
        var y int = this->get_y();
        forvar index int = 0; index < MENU_COUNT; index++ {
            var menu. menu = &this.menus[index];
            if focus and this.cursor == index {
                this.tex.button_hover->draw(render, x, y);
                // out of bounds
                menu.title->draw(render,
                    this->get_x() + (rect.w - menu.title->get_width()) / 2,
                    y - (menu.title->get_height() + 4));
            else
                this.tex.button->draw(render, x, y);
            }
            menu.icon->draw(render, x + 1, y + 1);
            x += (BUTTON_WIDTH + BUTTON_GAP);
        }
    }

    func wake() {
        this.input_delay->reset(false);
        this.input_lock->set(true);
    }

    //

    inline set_cursor(cursor int) {
        this.cursor = cursor;
    }

    inline get_selected_menu() .menu {
        if this.cursor < this.menu_count;
            return &this.menus[this.cursor];
        return null;
    }

}
