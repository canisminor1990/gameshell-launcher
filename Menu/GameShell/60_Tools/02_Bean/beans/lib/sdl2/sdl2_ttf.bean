
// 2.0.15.0

module lib+ {

    module sdl2_ttf+ {

        module so {

            struct struct {
                TTF_ByteSwappedUNICODE void;
                TTF_Init void;
                TTF_OpenFont void;
                TTF_OpenFontIndex void;
                TTF_GetFontStyle void;
                TTF_SetFontStyle void;
                TTF_GetFontOutline void;
                TTF_SetFontOutline void;
                TTF_GetFontHinting void;
                TTF_SetFontHinting void;
                TTF_FontHeight void;
                TTF_FontAscent void;
                TTF_FontDescent void;
                TTF_FontLineSkip void;
                TTF_GetFontKerning void;
                TTF_SetFontKerning void;
                TTF_FontFaces void;
                TTF_FontFaceIsFixedWidth void;
                TTF_FontFaceFamilyName void;
                TTF_FontFaceStyleName void;
                TTF_GlyphIsProvided void;
                TTF_GlyphMetrics void;
                TTF_SizeText void;
                TTF_SizeUTF8 void;
                TTF_SizeUNICODE void;
                TTF_RenderText_Solid void;
                TTF_RenderUTF8_Solid void;
                TTF_RenderUNICODE_Solid void;
                TTF_RenderGlyph_Solid void;
                TTF_RenderText_Shaded void;
                TTF_RenderUTF8_Shaded void;
                TTF_RenderUNICODE_Shaded void;
                TTF_RenderGlyph_Shaded void;
                TTF_RenderText_Blended void;
                TTF_RenderUTF8_Blended void;
                TTF_RenderUNICODE_Blended void;
                TTF_RenderText_Blended_Wrapped void;
                TTF_RenderUTF8_Blended_Wrapped void;
                TTF_RenderUNICODE_Blended_Wrapped void;
                TTF_RenderGlyph_Blended void;
                TTF_CloseFont void;
                TTF_Quit void;
                TTF_WasInit void;
                TTF_GetFontKerningSizeGlyphs void;
            }

            var fn struct;

            func init() bool {
                import rt::c;
                return dlsyms(dlopen("libSDL2_ttf-2.0.so.0", RTLD_LAZY), &fn,
                    "TTF_ByteSwappedUNICODE",
                    "TTF_Init",
                    "TTF_OpenFont",
                    "TTF_OpenFontIndex",
                    "TTF_GetFontStyle",
                    "TTF_SetFontStyle",
                    "TTF_GetFontOutline",
                    "TTF_SetFontOutline",
                    "TTF_GetFontHinting",
                    "TTF_SetFontHinting",
                    "TTF_FontHeight",
                    "TTF_FontAscent",
                    "TTF_FontDescent",
                    "TTF_FontLineSkip",
                    "TTF_GetFontKerning",
                    "TTF_SetFontKerning",
                    "TTF_FontFaces",
                    "TTF_FontFaceIsFixedWidth",
                    "TTF_FontFaceFamilyName",
                    "TTF_FontFaceStyleName",
                    "TTF_GlyphIsProvided",
                    "TTF_GlyphMetrics",
                    "TTF_SizeText",
                    "TTF_SizeUTF8",
                    "TTF_SizeUNICODE",
                    "TTF_RenderText_Solid",
                    "TTF_RenderUTF8_Solid",
                    "TTF_RenderUNICODE_Solid",
                    "TTF_RenderGlyph_Solid",
                    "TTF_RenderText_Shaded",
                    "TTF_RenderUTF8_Shaded",
                    "TTF_RenderUNICODE_Shaded",
                    "TTF_RenderGlyph_Shaded",
                    "TTF_RenderText_Blended",
                    "TTF_RenderUTF8_Blended",
                    "TTF_RenderUNICODE_Blended",
                    "TTF_RenderText_Blended_Wrapped",
                    "TTF_RenderUTF8_Blended_Wrapped",
                    "TTF_RenderUNICODE_Blended_Wrapped",
                    "TTF_RenderGlyph_Blended",
                    "TTF_CloseFont",
                    "TTF_Quit",
                    "TTF_WasInit",
                    "TTF_GetFontKerningSizeGlyphs"
                );
            }

        }

    }

    module sdl2_ttf+ {

        import sdl2;
        
        define {
            UNICODE_BOM_NATIVE = 0xFEFF;
            UNICODE_BOM_SWAPPED = 0xFFFE;
        }

        define {
            TTF_STYLE_NORMAL = 0x00;
            TTF_STYLE_BOLD = 0x01;
            TTF_STYLE_ITALIC = 0x02;
            TTF_STYLE_UNDERLINE = 0x04;
            TTF_STYLE_STRIKETHROUGH = 0x08;
        }

        define {
            TTF_HINTING_NORMAL = 0;
            TTF_HINTING_LIGHT = 1;
            TTF_HINTING_MONO = 2;
            TTF_HINTING_NONE = 3;
        }

    }

    module sdl2_ttf+ {

        inline TTF_ByteSwappedUNICODE(swapped int) {
            call1<void>(so::fn.TTF_ByteSwappedUNICODE, swapped);
        }

        inline TTF_Init() int {
            return call<int>(so::fn.TTF_Init);
        }

        inline TTF_OpenFont(file. char, ptsize int) +TTF_Font {
            return call2<void>(so::fn.TTF_OpenFont, file, ptsize);
        }

        inline TTF_OpenFontIndex(file. char, ptsize int, index long) +TTF_Font {
            return call3<void>(so::fn.TTF_OpenFontIndex, file, ptsize, index);
        }

        inline TTF_GetFontStyle(font+ TTF_Font) int {
            return call1<int>(so::fn.TTF_GetFontStyle, font);
        }

        inline TTF_SetFontStyle(font+ TTF_Font, style int) {
            call2<void>(so::fn.TTF_SetFontStyle, font, style);
        }

        inline TTF_GetFontOutline(font+ TTF_Font) int {
            return call1<int>(so::fn.TTF_GetFontOutline, font);
        }

        inline TTF_SetFontOutline(font+ TTF_Font, outline int) {
            call2<void>(so::fn.TTF_SetFontOutline, font, outline);
        }

        inline TTF_GetFontHinting(font+ TTF_Font) int {
            return call1<int>(so::fn.TTF_GetFontHinting, font);
        }

        inline TTF_SetFontHinting(font+ TTF_Font, hinting int) {
            call2<void>(so::fn.TTF_SetFontHinting, font, hinting);
        }

        inline TTF_FontHeight(font+ TTF_Font) int {
            return call1<int>(so::fn.TTF_FontHeight, font);
        }

        inline TTF_FontAscent(font+ TTF_Font) int {
            return call1<int>(so::fn.TTF_FontAscent, font);
        }

        inline TTF_FontDescent(font+ TTF_Font) int {
            return call1<int>(so::fn.TTF_FontDescent, font);
        }

        inline TTF_FontLineSkip(font+ TTF_Font) int {
            return call1<int>(so::fn.TTF_FontLineSkip, font);
        }

        inline TTF_GetFontKerning(font+ TTF_Font) int {
            return call1<int>(so::fn.TTF_GetFontKerning, font);
        }

        inline TTF_SetFontKerning(font+ TTF_Font, allowed int) {
            call2<void>(so::fn.TTF_SetFontKerning, font, allowed);
        }

        inline TTF_FontFaces(font+ TTF_Font) long {
            return call1<long>(so::fn.TTF_FontFaces, font);
        }

        inline TTF_FontFaceIsFixedWidth(font+ TTF_Font) int {
            return call1<int>(so::fn.TTF_FontFaceIsFixedWidth, font);
        }

        inline TTF_FontFaceFamilyName(font+ TTF_Font) .char {
            return call1<char*>(so::fn.TTF_FontFaceFamilyName, font);
        }

        inline TTF_FontFaceStyleName(font+ TTF_Font) .char {
            return call1<char*>(so::fn.TTF_FontFaceStyleName, font);
        }

        inline TTF_GlyphIsProvided(font+ TTF_Font, ch uint16) int {
            return call2<int>(so::fn.TTF_GlyphIsProvided, font, ch);
        }

        inline TTF_GlyphMetrics(font+ TTF_Font, ch uint16, minx. int, maxx. int, miny. int, maxy. int, advance. int) int {
            return call7<int>(so::fn.TTF_GlyphMetrics, font, ch, minx, maxx, miny, maxy, advance);
        }

        inline TTF_SizeText(font+ TTF_Font, text. char, w. int, h. int) int {
            return call4<int>(so::fn.TTF_SizeText, font, text, w, h);
        }

        inline TTF_SizeUTF8(font+ TTF_Font, text. char, w. int, h. int) int {
            return call4<int>(so::fn.TTF_SizeUTF8, font, text, w, h);
        }

        inline TTF_SizeUNICODE(font+ TTF_Font, text. uint16, w. int, h. int) int {
            return call4<int>(so::fn.TTF_SizeUNICODE, font, text, w, h);
        }

        inline TTF_RenderText_Solid(font+ TTF_Font, text. char, fg uint32 /* SDL_Color */) .SDL_Surface {
            return call3<void>(so::fn.TTF_RenderText_Solid, font, text, fg);
        }

        inline TTF_RenderUTF8_Solid(font+ TTF_Font, text. char, fg uint32 /* SDL_Color */) .SDL_Surface {
            return call3<void>(so::fn.TTF_RenderUTF8_Solid, font, text, fg);
        }

        inline TTF_RenderUNICODE_Solid(font+ TTF_Font, text. uint16, fg uint32 /* SDL_Color */) .SDL_Surface {
            return call3<void>(so::fn.TTF_RenderUNICODE_Solid, font, text, fg);
        }

        inline TTF_RenderGlyph_Solid(font+ TTF_Font, ch uint16, fg uint32 /* SDL_Color */) .SDL_Surface {
            return call3<void>(so::fn.TTF_RenderGlyph_Solid, font, ch, fg);
        }

        inline TTF_RenderText_Shaded(font+ TTF_Font, text. char, fg uint32 /* SDL_Color */, bg uint32 /* SDL_Color */) .SDL_Surface {
            return call4<void>(so::fn.TTF_RenderText_Shaded, font, text, fg, bg);
        }

        inline TTF_RenderUTF8_Shaded(font+ TTF_Font, text. char, fg uint32 /* SDL_Color */, bg uint32 /* SDL_Color */) .SDL_Surface {
            return call4<void>(so::fn.TTF_RenderUTF8_Shaded, font, text, fg, bg);
        }

        inline TTF_RenderUNICODE_Shaded(font+ TTF_Font, text. uint16, fg uint32 /* SDL_Color */, bg uint32 /* SDL_Color */) .SDL_Surface {
            return call4<void>(so::fn.TTF_RenderUNICODE_Shaded, font, text, fg, bg);
        }

        inline TTF_RenderGlyph_Shaded(font+ TTF_Font, ch uint16, fg uint32 /* SDL_Color */, bg uint32 /* SDL_Color */) .SDL_Surface {
            return call4<void>(so::fn.TTF_RenderGlyph_Shaded, font, ch, fg, bg);
        }

        inline TTF_RenderText_Blended(font+ TTF_Font, text. char, fg uint32 /* SDL_Color */) .SDL_Surface {
            return call3<void>(so::fn.TTF_RenderText_Blended, font, text, fg);
        }

        inline TTF_RenderUTF8_Blended(font+ TTF_Font, text. char, fg uint32 /* SDL_Color */) .SDL_Surface {
            return call3<void>(so::fn.TTF_RenderUTF8_Blended, font, text, fg);
        }

        inline TTF_RenderUNICODE_Blended(font+ TTF_Font, text. uint16, fg uint32 /* SDL_Color */) .SDL_Surface {
            return call3<void>(so::fn.TTF_RenderUNICODE_Blended, font, text, fg);
        }

        inline TTF_RenderText_Blended_Wrapped(font+ TTF_Font, text. char, fg uint32 /* SDL_Color */, wrapLength uint32) .SDL_Surface {
            return call4<void>(so::fn.TTF_RenderText_Blended_Wrapped, font, text, fg, wrapLength);
        }

        inline TTF_RenderUTF8_Blended_Wrapped(font+ TTF_Font, text. char, fg uint32 /* SDL_Color */, wrapLength uint32) .SDL_Surface {
            return call4<void>(so::fn.TTF_RenderUTF8_Blended_Wrapped, font, text, fg, wrapLength);
        }

        inline TTF_RenderUNICODE_Blended_Wrapped(font+ TTF_Font, text. uint16, fg uint32 /* SDL_Color */, wrapLength uint32) .SDL_Surface {
            return call4<void>(so::fn.TTF_RenderUNICODE_Blended_Wrapped, font, text, fg, wrapLength);
        }

        inline TTF_RenderGlyph_Blended(font+ TTF_Font, ch uint16, fg uint32 /* SDL_Color */) .SDL_Surface {
            return call3<void>(so::fn.TTF_RenderGlyph_Blended, font, ch, fg);
        }

        inline TTF_CloseFont(font+ TTF_Font) {
            call1<void>(so::fn.TTF_CloseFont, font);
        }

        inline TTF_Quit() {
            call<void>(so::fn.TTF_Quit);
        }

        inline TTF_WasInit() int {
            return call<int>(so::fn.TTF_WasInit);
        }

        inline TTF_GetFontKerningSizeGlyphs(font+ TTF_Font, previous_ch uint16, ch uint16) int {
            return call3<int>(so::fn.TTF_GetFontKerningSizeGlyphs, font, previous_ch, ch);
        }

    }

}
