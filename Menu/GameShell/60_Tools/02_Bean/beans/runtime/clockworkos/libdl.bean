
module rt+, c+ {

    import libc;

    // #include <dlfcn.h>

    func dlopen(filename. char, flag int) void {
        runtime dlopen(filename. char, flag int) void = 1;
        if (func = dlopen(filename, flag)) == null;
            printf("dlopen: %s\n", filename);
    }

    runtime dlerror() .char = 2;
    runtime dlsym(handle void, symbol. char) void = 3;
    runtime dlclose(handle void) int = 4;

    // util

    func dlopens(flag int, ...) void {
        forvar ap. char* = va_start(flag), size uint32 = va_size(flag); size; {
            if (func = dlopen(.ap, flag)) ~= null;
                return;
            va_nexts<char*>(ap, size);
        }
        return null;
    }

    func dlsyms(handle void, funcs. char*, ...) bool {
        if handle == null;
            return false;
        forvar ap. char* = va_start(handle), size uint32 = va_size(handle); size; funcs += sizeof(char*) {
            if (.funcs = dlsym(handle, .ap)) == null {
                printf("dlsyms: %s\n", .ap);
                return false;
            }
            va_nexts<char*>(ap, size);
        }
        return true;
    }

}
